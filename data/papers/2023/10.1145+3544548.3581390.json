{
  "doi": "10.1145/3544548.3581390",
  "title": "CrossCode: Multi-level Visualization of Program Execution",
  "published": "2023-04-19",
  "proctitle": "CHI '23: Proceedings of the 2023 CHI Conference on Human Factors in Computing Systems",
  "pages": "1-13",
  "year": 2023,
  "badges": [],
  "abstract": "Program visualizations help to form useful mental models of how programs work, and to reason and debug code. But these visualizations exist at a fixed level of abstraction, e.g., line-by-line. In contrast, programmers switch between many levels of abstraction when inspecting program behavior. Based on results from a formative study of hand-designed program visualizations, we designed CrossCode, a web-based program visualization system for JavaScript that leverages structural cues in syntax, control flow, and data flow to aggregate and navigate program execution across multiple levels of abstraction. In an exploratory qualitative study with experts, we found that CrossCode enabled participants to maintain a strong sense of place in program execution, was conducive to explaining program behavior, and helped track changes and updates to the program state.",
  "tags": [
    "debugging",
    "program visualization",
    "programming"
  ],
  "authors": [
    {
      "name": "Devamardeep Hayatpur",
      "institution": "Department of Cognitive Science and Design Lab, University of California, San Diego, United States",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99659474755",
      "orcid": "0000-0001-5984-9752"
    },
    {
      "name": "Daniel Wigdor",
      "institution": "Department of Computer Science, University of Toronto, Canada",
      "img": "/do/10.1145/contrib-81100606762/rel-imgonly/img_1274.jpg",
      "acmid": "81100606762",
      "orcid": "0000-0003-2008-7070"
    },
    {
      "name": "Haijun Xia",
      "institution": "Department of Cognitive Science and Design Lab, University of California, San Diego, United States",
      "img": "/do/10.1145/contrib-99658640651/rel-imgonly/haijun_xia_acm.jpg",
      "acmid": "99658640651",
      "orcid": "0000-0002-9425-0881"
    }
  ],
  "references": [
    {
      "text": "Harold Abelson and Gerald\u00a0J. Sussman. 1996. Structure and Interpretation of Computer Programs (2nd ed.). MIT Press, Cambridge, MA, USA.",
      "doi": ""
    },
    {
      "text": "acornjs. 2013. Acorn. Retrieved February 13, 2023 from https://github.com/acornjs/acorn",
      "doi": ""
    },
    {
      "text": "Maneesh Agrawala, Wilmot Li, and Floraine Berthouzoz. 2011. Design Principles for Visual Communication. Commun. ACM 54, 4 (apr 2011), 60\u201369. https://doi.org/10.1145/1924421.1924439",
      "doi": "10.1145/1924421.1924439"
    },
    {
      "text": "Alfred\u00a0V. Aho, Monica\u00a0S. Lam, Ravi Sethi, and Jeffrey\u00a0D. Ullman. 2006. Compilers: Principles, Techniques, and Tools (2nd Edition). Addison-Wesley Longman Publishing Co., Inc., USA.",
      "doi": "10.5555/1177220"
    },
    {
      "text": "Miltiadis Allamanis, Earl\u00a0T. Barr, Premkumar Devanbu, and Charles Sutton. 2018. A Survey of Machine Learning for Big Code and Naturalness. ACM Comput. Surv. 51, 4, Article 81 (jul 2018), 37\u00a0pages. https://doi.org/10.1145/3212695",
      "doi": "10.1145/3212695"
    },
    {
      "text": "Aivar Annamaa. 2015. Introducing Thonny, a Python IDE for Learning Programming. In Proceedings of the 15th Koli Calling Conference on Computing Education Research (Koli, Finland) (Koli Calling \u201915). Association for Computing Machinery, New York, NY, USA, 117\u2013121. https://doi.org/10.1145/2828959.2828969",
      "doi": "10.1145/2828959.2828969"
    },
    {
      "text": "Ronald Baecker. 1998. Sorting out sorting: A case study of software visualization for teaching computer science. Software visualization: Programming as a multimedia experience 1 (1998), 369\u2013381.",
      "doi": ""
    },
    {
      "text": "Brilliant. 2011. Brilliant. Retrieved September 15, 2022 from https://brilliant.org/",
      "doi": ""
    },
    {
      "text": "Ruven Brooks. 1983. Towards a theory of the comprehension of computer programs. International Journal of Man-Machine Studies 18, 6 (1983), 543\u2013554. https://doi.org/10.1016/S0020-7373(83)80031-5",
      "doi": ""
    },
    {
      "text": "[10] Wikimedia Commons.2004. Retrieved September 15, 2022 from https://commons.wikimedia.org/",
      "doi": ""
    },
    {
      "text": "Thomas\u00a0H. Cormen, Charles\u00a0E. Leiserson, Ronald\u00a0L. Rivest, and Clifford Stein. 2009. Introduction to Algorithms, Third Edition(3rd ed.). The MIT Press, Cambridge, MA, USA.",
      "doi": "10.5555/1614191"
    },
    {
      "text": "Will Crichton, Maneesh Agrawala, and Pat Hanrahan. 2021. The Role of Working Memory in Program Tracing. In Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems (Yokohama, Japan) (CHI \u201921). Association for Computing Machinery, New York, NY, USA, Article 56, 13\u00a0pages. https://doi.org/10.1145/3411764.3445257",
      "doi": "10.1145/3411764.3445257"
    },
    {
      "text": "Robert DeLine, Andrew Bragdon, Kael Rowan, Jens Jacobsen, and Steven\u00a0P. Reiss. 2012. Debugger Canvas: Industrial Experience with the Code Bubbles Paradigm. In Proceedings of the 34th International Conference on Software Engineering (Zurich, Switzerland) (ICSE \u201912). IEEE Press, Zurich, Switzerland, 1064\u20131073.",
      "doi": "10.5555/2337223.2337362"
    },
    {
      "text": "Jonathan Edwards. 2007. No Ifs, Ands, or Buts: Uncovering the Simplicity of Conditionals. SIGPLAN Not. 42, 10 (oct 2007), 639\u2013658. https://doi.org/10.1145/1297105.1297075",
      "doi": "10.1145/1297105.1297075"
    },
    {
      "text": "Paul Gries, Vlad Mnih, J. Taylor, G\u00a0M Wilson, and Lee Zamparo. 2005. Memview: a pedagogically-motivated visual debugger. Proceedings Frontiers in Education 35th Annual Conference (2005), S1J\u201311.",
      "doi": ""
    },
    {
      "text": "Philip\u00a0J. Guo. 2013. Online Python Tutor: Embeddable Web-Based Program Visualization for Cs Education. In Proceeding of the 44th ACM Technical Symposium on Computer Science Education (Denver, Colorado, USA) (SIGCSE \u201913). Association for Computing Machinery, New York, NY, USA, 579\u2013584. https://doi.org/10.1145/2445196.2445368",
      "doi": "10.1145/2445196.2445368"
    },
    {
      "text": "C. Hundhausen and S. Douglas. 2000. SALSA and ALVIS: a language and system for constructing and presenting low fidelity algorithm visualizations. In Proceeding 2000 IEEE International Symposium on Visual Languages. 67\u201368. https://doi.org/10.1109/VL.2000.874355",
      "doi": ""
    },
    {
      "text": "Christopher\u00a0D. Hundhausen and Jonathan\u00a0L. Brown. 2007. What You See Is What You Code: A \"Live\" Algorithm Development and Visualization Environment for Novice Learners. J. Vis. Lang. Comput. 18, 1 (feb 2007), 22\u201347. https://doi.org/10.1016/j.jvlc.2006.03.002",
      "doi": "10.1016/j.jvlc.2006.03.002"
    },
    {
      "text": "Christopher\u00a0D. Hundhausen, Sarah\u00a0A. Douglas, and John\u00a0T. Stasko. 2002. A Meta-Study of Algorithm Visualization Effectiveness. Journal of Visual Languages & Computing 13, 3 (2002), 259\u2013290. https://doi.org/10.1006/jvlc.2002.0237",
      "doi": ""
    },
    {
      "text": "Hyeonsu Kang and Philip\u00a0J. Guo. 2017. Omnicode: A Novice-Oriented Live Programming Environment with Always-On Run-Time Value Visualizations. In Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology (Qu\u00e9bec City, QC, Canada) (UIST \u201917). Association for Computing Machinery, New York, NY, USA, 737\u2013745. https://doi.org/10.1145/3126594.3126632",
      "doi": "10.1145/3126594.3126632"
    },
    {
      "text": "Hiroki Kokubun. 2018. Tweakpane. Retrieved February 13, 2023 from https://cocopon.github.io/tweakpane/",
      "doi": ""
    },
    {
      "text": "Thomas\u00a0D. LaToza and Brad\u00a0A. Myers. 2011. Visualizing call graphs. In 2011 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC). 117\u2013124. https://doi.org/10.1109/VLHCC.2011.6070388",
      "doi": ""
    },
    {
      "text": "Sorin Lerner. 2020. Projection Boxes: On-the-Fly Reconfigurable Visualization for Live Programming. In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems (Honolulu, HI, USA) (CHI \u201920). Association for Computing Machinery, New York, NY, USA, 1\u20137. https://doi.org/10.1145/3313831.3376494",
      "doi": "10.1145/3313831.3376494"
    },
    {
      "text": "Stanley Letovsky. 1987. Cognitive processes in program comprehension. Journal of Systems and Software 7, 4 (1987), 325\u2013339. https://doi.org/10.1016/0164-1212(87)90032-X",
      "doi": "10.1016/0164-1212%2887%2990032-X"
    },
    {
      "text": "Mike Lopez, Jacqueline Whalley, Phil Robbins, and Raymond Lister. 2008. Relationships between Reading, Tracing and Writing Skills in Introductory Programming. In Proceedings of the Fourth International Workshop on Computing Education Research(Sydney, Australia) (ICER \u201908). Association for Computing Machinery, New York, NY, USA, 101\u2013112. https://doi.org/10.1145/1404520.1404531",
      "doi": "10.1145/1404520.1404531"
    },
    {
      "text": "Dor Ma\u2019ayan, Wode Ni, Katherine Ye, Chinmay Kulkarni, and Joshua Sunshine. 2020. How Domain Experts Create Conceptual Diagrams and Implications for Tool Design. In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems (Honolulu, HI, USA) (CHI \u201920). Association for Computing Machinery, New York, NY, USA, 1\u201314. https://doi.org/10.1145/3313831.3376253",
      "doi": "10.1145/3313831.3376253"
    },
    {
      "text": "Bradley\u00a0N Miller and David\u00a0L Ranum. 2011. Problem solving with algorithms and data structures using python Second Edition. Franklin, Beedle & Associates Inc.",
      "doi": ""
    },
    {
      "text": "Robert Nystrom. 2021. Crafting interpreters. Genever Benning.",
      "doi": ""
    },
    {
      "text": "Nancy Pennington. 1987. Stimulus structures and mental representations in expert comprehension of computer programs. Cognitive Psychology 19, 3 (1987), 295\u2013341. https://doi.org/10.1016/0010-0285(87)90007-7",
      "doi": ""
    },
    {
      "text": "Reducible. 2019. Reducible. Retrieved September 15, 2022 from https://www.youtube.com/c/Reducible",
      "doi": ""
    },
    {
      "text": "Steve Ruiz. 2020. Perfect Arrows. Retrieved February 13, 2023 from https://github.com/steveruizok/perfect-arrows",
      "doi": ""
    },
    {
      "text": "Stuart Russell and Peter Norvig. 2009. Artificial Intelligence: A Modern Approach(3rd ed.). Prentice Hall Press, USA.",
      "doi": "10.5555/1671238"
    },
    {
      "text": "Grant Sanderson. 2017. 3Blue1Brown. Retrieved September 15, 2022 from https://www.youtube.com/c/3blue1brown",
      "doi": ""
    },
    {
      "text": "Koushik Sen, Swaroop Kalasapur, Tasneem Brutch, and Simon Gibbs. 2013. Jalangi: A Selective Record-Replay and Dynamic Analysis Framework for JavaScript. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (Saint Petersburg, Russia) (ESEC/FSE 2013). Association for Computing Machinery, New York, NY, USA, 488\u2013498. https://doi.org/10.1145/2491411.2491447",
      "doi": "10.1145/2491411.2491447"
    },
    {
      "text": "Clifford\u00a0A. Shaffer, Matthew\u00a0L. Cooper, Alexander Joel\u00a0D. Alon, Monika Akbar, Michael Stewart, Sean Ponce, and Stephen\u00a0H. Edwards. 2010. Algorithm Visualization: The State of the Field. ACM Trans. Comput. Educ. 10, 3, Article 9 (aug 2010), 22\u00a0pages. https://doi.org/10.1145/1821996.1821997",
      "doi": "10.1145/1821996.1821997"
    },
    {
      "text": "Clifford\u00a0A. Shaffer, Ville Karavirta, Ari Korhonen, and Thomas\u00a0L. Naps. 2011. OpenDSA: Beginning a Community Active-EBook Project. In Proceedings of the 11th Koli Calling International Conference on Computing Education Research (Koli, Finland) (Koli Calling \u201911). Association for Computing Machinery, New York, NY, USA, 112\u2013117. https://doi.org/10.1145/2094131.2094154",
      "doi": "10.1145/2094131.2094154"
    },
    {
      "text": "Daniel Shiffman, Shannon Fry, and Zannah Marsh. 2012. The nature of code. D. Shiffman.",
      "doi": ""
    },
    {
      "text": "B. Shneiderman. 1996. The eyes have it: a task by data type taxonomy for information visualizations. In Proceedings 1996 IEEE Symposium on Visual Languages. 336\u2013343. https://doi.org/10.1109/VL.1996.545307",
      "doi": ""
    },
    {
      "text": "Elliot Soloway and Kate Ehrlich. 1984. Empirical Studies of Programming Knowledge. IEEE Transactions on Software Engineering SE-10, 5 (1984), 595\u2013609. https://doi.org/10.1109/TSE.1984.5010283",
      "doi": "10.1109/TSE.1984.5010283"
    },
    {
      "text": "J.T. Stasko. 1990. Tango: a framework and system for algorithm animation. Computer 23, 9 (1990), 27\u201339. https://doi.org/10.1109/2.58216",
      "doi": "10.1109/2.58216"
    },
    {
      "text": "M.-A.D. Storey, F.D. Fracchia, and H.A. Muller. 1997. Cognitive design elements to support the construction of a mental model during software visualization. In Proceedings Fifth International Workshop on Program Comprehension. IWPC\u201997. 17\u201328. https://doi.org/10.1109/WPC.1997.601257",
      "doi": ""
    },
    {
      "text": "Margaret-Anne\u00a0D Storey, F\u00a0David Fracchia, and Sheelagh Carpendale. 1994. A Top-Down Approach to Algorithm Animation. Techincal Report CMPT(1994), 94\u201305.",
      "doi": ""
    },
    {
      "text": "Sangho Suh, Celine Latulipe, Ken\u00a0Jen Lee, Bernadette Cheng, and Edith Law. 2021. Using Comics to Introduce and Reinforce Programming Concepts in CS1. In Proceedings of the 52nd ACM Technical Symposium on Computer Science Education (Virtual Event, USA) (SIGCSE \u201921). Association for Computing Machinery, New York, NY, USA, 369\u2013375. https://doi.org/10.1145/3408877.3432465",
      "doi": "10.1145/3408877.3432465"
    },
    {
      "text": "Bret Victor. 2011. Ladder of Abstraction. Retrieved September 15, 2022 from http://worrydream.com/LadderOfAbstraction/",
      "doi": ""
    },
    {
      "text": "Bret Victor. 2012. Inventing On Principle. Retrieved September 15, 2022 from https://vimeo.com/38272912",
      "doi": ""
    },
    {
      "text": "vitejs. 2019. Vite. Retrieved February 13, 2023 from https://vitejs.dev/",
      "doi": ""
    },
    {
      "text": "A. Von\u00a0Mayrhauser and A.M. Vans. 1995. Program comprehension during software maintenance and evolution. Computer 28, 8 (1995), 44\u201355. https://doi.org/10.1109/2.402076",
      "doi": "10.1109/2.402076"
    },
    {
      "text": "Haijun Xia, Ken Hinckley, Michel Pahud, Xiao Tu, and Bill Buxton. 2017. WritLarge: Ink Unleashed by Unified Scope, Action, & Zoom. In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems (Denver, Colorado, USA) (CHI \u201917). Association for Computing Machinery, New York, NY, USA, 3227\u20133240. https://doi.org/10.1145/3025453.3025664",
      "doi": "10.1145/3025453.3025664"
    },
    {
      "text": "Benjamin Xie, Greg\u00a0L. Nelson, and Amy\u00a0J. Ko. 2018. An Explicit Strategy to Scaffold Novice Program Tracing. In Proceedings of the 49th ACM Technical Symposium on Computer Science Education (Baltimore, Maryland, USA) (SIGCSE \u201918). Association for Computing Machinery, New York, NY, USA, 344\u2013349. https://doi.org/10.1145/3159450.3159527",
      "doi": "10.1145/3159450.3159527"
    },
    {
      "text": "Baowen Xu, Ju Qian, Xiaofang Zhang, Zhongqiang Wu, and Lin Chen. 2005. A Brief Survey of Program Slicing. SIGSOFT Softw. Eng. Notes 30, 2 (mar 2005), 1\u201336. https://doi.org/10.1145/1050849.1050865",
      "doi": "10.1145/1050849.1050865"
    },
    {
      "text": "Jimkwan Yau. 2018. Sval. Retrieved February 13, 2023 from https://github.com/Siubaak/sval",
      "doi": ""
    }
  ]
}