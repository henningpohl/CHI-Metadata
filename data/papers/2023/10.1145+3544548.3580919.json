{
  "doi": "10.1145/3544548.3580919",
  "title": "Studying the effect of AI Code Generators on Supporting Novice Learners in Introductory Programming",
  "published": "2023-04-19",
  "proctitle": "CHI '23: Proceedings of the 2023 CHI Conference on Human Factors in Computing Systems",
  "pages": "1-23",
  "year": 2023,
  "badges": [],
  "abstract": "AI code generators like OpenAI Codex have the potential to assist novice programmers by generating code from natural language descriptions, however, over-reliance might negatively impact learning and retention. To explore the implications that AI code generators have on introductory programming, we conducted a controlled experiment with 69 novices (ages 10-17). Learners worked on 45 Python code-authoring tasks, for which half of the learners had access to Codex, each followed by a code-modification task. Our results show that using Codex significantly increased code-authoring performance (1.15x increased completion rate and 1.8x higher scores) while not decreasing performance on manual code-modification tasks. Additionally, learners with access to Codex during the training phase performed slightly better on the evaluation post-tests conducted one week later, although this difference did not reach statistical significance. Of interest, learners with higher Scratch pre-test scores performed significantly better on retention post-tests, if they had prior access to Codex.",
  "tags": [
    "Large Language Models",
    "GPT-3",
    "AI-Assisted Pair-Programming",
    "K-12 Computer Science Education",
    "Copilot",
    "OpenAI Codex",
    "AI Coding Assistants",
    "ChatGPT",
    "Introductory Programming"
  ],
  "authors": [
    {
      "name": "Majeed Kazemitabaar",
      "institution": "Department of Computer Science, University of Toronto, Canada",
      "img": "/do/10.1145/contrib-99658613384/rel-imgonly/majeed-mirror.jpg",
      "acmid": "99658613384",
      "orcid": "0000-0001-6118-7938"
    },
    {
      "name": "Justin Chow",
      "institution": "Department of Computer Science, University of Toronto, Canada",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99660781369",
      "orcid": "0000-0001-9668-8759"
    },
    {
      "name": "Carl Ka To Ma",
      "institution": "Department of Computer Science, University of Toronto, Canada",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99660780798",
      "orcid": "0000-0002-5178-6918"
    },
    {
      "name": "Barbara J. Ericson",
      "institution": "School of Information, University of Michigan, United States",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "81100073230",
      "orcid": "0000-0001-6881-8341"
    },
    {
      "name": "David Weintrop",
      "institution": "College of Education, College of Information Studies, University of Maryland, United States",
      "img": "/do/10.1145/contrib-81554583556/rel-imgonly/dw-profile-pic4.jpg",
      "acmid": "81554583556",
      "orcid": "0000-0002-3009-3899"
    },
    {
      "name": "Tovi Grossman",
      "institution": "Department of Computer Science, University of Toronto, Canada",
      "img": "/do/10.1145/contrib-81100477897/rel-imgonly/81100477897.jpg",
      "acmid": "81100477897",
      "orcid": "0000-0002-0494-5373"
    }
  ],
  "references": [
    {
      "text": "Amjad Altadmri and Neil\u00a0CC Brown. 2015. 37 million compilations: Investigating novice programming mistakes in large-scale student data. In Proceedings of the 46th ACM technical symposium on computer science education. 522\u2013527.",
      "doi": "10.1145/2676723.2677258"
    },
    {
      "text": "Amazon Web Services. 2022. CodeWhisperer: ML-powered coding companion. https://aws.amazon.com/codewhisperer/. [Online; accessed 9-September-2022].",
      "doi": ""
    },
    {
      "text": "Thomas Ball, Abhijith Chatra, Peli de Halleux, Steve Hodges, Micha\u0142 Moskal, and Jacqueline Russell. 2019. Microsoft MakeCode: embedded programming for education, in blocks and TypeScript. In Proceedings of the 2019 ACM SIGPLAN Symposium on SPLASH-E. 7\u201312.",
      "doi": "10.1145/3358711.3361630"
    },
    {
      "text": "Bruce\u00a0W Ballard and Alan\u00a0W Biermann. 1979. Programming in natural language: \u201cNLC\u201d as a prototype. In Proceedings of the 1979 annual conference. 228\u2013237.",
      "doi": "10.1145/800177.810072"
    },
    {
      "text": "Matej Balog, Alexander\u00a0L Gaunt, Marc Brockschmidt, Sebastian Nowozin, and Daniel Tarlow. 2016. Deepcoder: Learning to write programs. arXiv preprint arXiv:1611.01989(2016).",
      "doi": ""
    },
    {
      "text": "David Bau, D\u00a0Anthony Bau, Mathew Dawson, and C\u00a0Sydney Pickens. 2015. Pencil code: block code for a text world. In Proceedings of the 14th international conference on interaction design and children. 445\u2013448.",
      "doi": "10.1145/2771839.2771875"
    },
    {
      "text": "Brett\u00a0A Becker and Keith Quille. 2019. 50 years of cs1 at sigcse: A review of the evolution of introductory programming education research. In Proceedings of the 50th acm technical symposium on computer science education. 338\u2013344.",
      "doi": "10.1145/3287324.3287432"
    },
    {
      "text": "Andrew Begel. 1996. LogoBlocks: A graphical programming language for interacting with the world. Electrical Engineering and Computer Science Department, MIT, Boston, MA 2 (1996).",
      "doi": ""
    },
    {
      "text": "Andrew Begel and Susan\u00a0L Graham. 2005. Spoken programs. In 2005 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC\u201905). IEEE, 99\u2013106.",
      "doi": "10.1109/VLHCC.2005.58"
    },
    {
      "text": "Klara Benda, Amy Bruckman, and Mark Guzdial. 2012. When life and learning do not fit: Challenges of workload and communication in introductory computer science online. ACM Transactions on Computing Education (TOCE) 12, 4 (2012), 1\u201338.",
      "doi": "10.1145/2382564.2382567"
    },
    {
      "text": "Alan\u00a0W Biermann, Bruce\u00a0W Ballard, and Anne\u00a0H Sigmon. 1983. An experimental study of natural language programming. International journal of man-machine studies 18, 1 (1983), 71\u201387.",
      "doi": ""
    },
    {
      "text": "Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared\u00a0D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, 2020. Language models are few-shot learners. Advances in neural information processing systems 33 (2020), 1877\u20131901.",
      "doi": ""
    },
    {
      "text": "Miriam Bruhn and David McKenzie. 2009. In pursuit of balance: Randomization in practice in development field experiments. American economic journal: applied economics 1, 4 (2009), 200\u2013232.",
      "doi": ""
    },
    {
      "text": "Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de\u00a0Oliveira Pinto, Jared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, 2021. Evaluating large language models trained on code. arXiv preprint arXiv:2107.03374(2021).",
      "doi": ""
    },
    {
      "text": "Parmit\u00a0K Chilana, Rishabh Singh, and Philip\u00a0J Guo. 2016. Understanding conversational programmers: A perspective from the software industry. In Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems. 1462\u20131472.",
      "doi": "10.1145/2858036.2858323"
    },
    {
      "text": "Aakanksha Chowdhery, Sharan Narang, Jacob Devlin, Maarten Bosma, Gaurav Mishra, Adam Roberts, Paul Barham, Hyung\u00a0Won Chung, Charles Sutton, Sebastian Gehrmann, 2022. Palm: Scaling language modeling with pathways. arXiv preprint arXiv:2204.02311(2022).",
      "doi": ""
    },
    {
      "text": "Stephen Cooper, Wanda Dann, and Randy Pausch. 2000. Alice: a 3-D tool for introductory programming concepts. Journal of computing sciences in colleges 15, 5 (2000), 107\u2013116.",
      "doi": "10.5555/364133.364161"
    },
    {
      "text": "Aditya Desai, Sumit Gulwani, Vineet Hingorani, Nidhi Jain, Amey Karkare, Mark Marron, and Subhajit Roy. 2016. Program synthesis using natural language. In Proceedings of the 38th International Conference on Software Engineering. 345\u2013356.",
      "doi": "10.1145/2884781.2884786"
    },
    {
      "text": "Edsger\u00a0W Dijkstra. 1979. On the foolishness of\u201d natural language programming\u201d. Program Construction, International Summer School (1979), 51\u201353.",
      "doi": ""
    },
    {
      "text": "Pierre Dragicevic. 2015. HCI Statistics without p-values. Ph.\u00a0D. Dissertation. Inria.",
      "doi": ""
    },
    {
      "text": "Benedict Du\u00a0Boulay. 1986. Some difficulties of learning to program. Journal of Educational Computing Research 2, 1 (1986), 57\u201373.",
      "doi": ""
    },
    {
      "text": "Rodrigo Duran, Juha Sorva, and Sofia Leite. 2018. Towards an analysis of program complexity from a cognitive perspective. In Proceedings of the 2018 ACM Conference on International Computing Education Research. 21\u201330.",
      "doi": "10.1145/3230977.3230986"
    },
    {
      "text": "Rodrigo Duran, Albina Zavgorodniaia, and Juha Sorva. 2022. Cognitive Load Theory in Computing Education Research: A Review. ACM Transactions on Computing Education (TOCE) 22, 4 (2022), 1\u201327.",
      "doi": "10.1145/3483843"
    },
    {
      "text": "Barbara\u00a0J Ericson, James\u00a0D Foley, and Jochen Rick. 2018. Evaluating the efficiency and effectiveness of adaptive parsons problems. In Proceedings of the 2018 ACM Conference on International Computing Education Research. 60\u201368.",
      "doi": "10.1145/3230977.3231000"
    },
    {
      "text": "Barbara\u00a0J Ericson, Lauren\u00a0E Margulieux, and Jochen Rick. 2017. Solving parsons problems versus fixing and writing code. In Proceedings of the 17th koli calling international conference on computing education research. 20\u201329.",
      "doi": "10.1145/3141880.3141895"
    },
    {
      "text": "Garry Falloon. 2016. An analysis of young students\u2019 thinking when completing basic coding tasks using Scratch Jnr. On the iPad. Journal of Computer Assisted Learning 32, 6 (2016), 576\u2013593.",
      "doi": "10.1111/jcal.12155"
    },
    {
      "text": "Zhangyin Feng, Daya Guo, Duyu Tang, Nan Duan, Xiaocheng Feng, Ming Gong, Linjun Shou, Bing Qin, Ting Liu, Daxin Jiang, 2020. Codebert: A pre-trained model for programming and natural languages. arXiv preprint arXiv:2002.08155(2020).",
      "doi": ""
    },
    {
      "text": "Georgios Fessakis, Evangelia Gouli, and Elisavet Mavroudi. 2013. Problem solving by 5\u20136 years old kindergarten children in a computer programming environment: A case study. Computers & Education 63 (2013), 87\u201397.",
      "doi": "10.1016/j.compedu.2012.11.016"
    },
    {
      "text": "James Finnie-Ansley, Paul Denny, Brett\u00a0A Becker, Andrew Luxton-Reilly, and James Prather. 2022. The robots are coming: Exploring the implications of openai codex on introductory programming. In Australasian Computing Education Conference. 10\u201319.",
      "doi": "10.1145/3511861.3511863"
    },
    {
      "text": "Diana Franklin, Merijke Coenraad, Jennifer Palmer, Donna Eatinger, Anna Zipp, Marco Anaya, Max White, Hoang Pham, Ozan G\u00f6kdemir, and David Weintrop. 2020. An Analysis of Use-Modify-Create Pedagogical Approach\u2019s Success in Balancing Structure and Student Agency. In Proceedings of the 2020 ACM Conference on International Computing Education Research. 14\u201324.",
      "doi": "10.1145/3372782.3406256"
    },
    {
      "text": "Github. 2022. Copilot: Your AI pair programmer. https://github.com/features/copilot. [Online; accessed 9-September-2022].",
      "doi": ""
    },
    {
      "text": "Shuchi Grover and Roy Pea. 2013. Computational thinking in K\u201312: A review of the state of the field. Educational researcher 42, 1 (2013), 38\u201343.",
      "doi": ""
    },
    {
      "text": "Sumit Gulwani. 2011. Automating string processing in spreadsheets using input-output examples. ACM Sigplan Notices 46, 1 (2011), 317\u2013330.",
      "doi": "10.1145/1925844.1926423"
    },
    {
      "text": "Sumit Gulwani and Mark Marron. 2014. Nlyze: Interactive programming by natural language for spreadsheet data analysis and manipulation. In Proceedings of the 2014 ACM SIGMOD international conference on Management of data. 803\u2013814.",
      "doi": "10.1145/2588555.2612177"
    },
    {
      "text": "Maria Hristova, Ananya Misra, Megan Rutter, and Rebecca Mercuri. 2003. Identifying and correcting Java programming errors for introductory computer science students. ACM Sigcse Bulletin 35, 1 (2003), 153\u2013156.",
      "doi": "10.1145/792548.611956"
    },
    {
      "text": "Edwin\u00a0L Hutchins, James\u00a0D Hollan, and Donald\u00a0A Norman. 1985. Direct manipulation interfaces. Human\u2013computer interaction 1, 4 (1985), 311\u2013338.",
      "doi": "10.1207/s15327051hci0104_2"
    },
    {
      "text": "Paul Jaccard. 1901. \u00c9tude comparative de la distribution florale dans une portion des Alpes et des Jura. Bull Soc Vaudoise Sci Nat 37 (1901), 547\u2013579.",
      "doi": ""
    },
    {
      "text": "Dhanya Jayagopal, Justin Lubin, and Sarah\u00a0E Chasins. 2022. Exploring the Learnability of Program Synthesizers by Novice Programmers. In Proceedings of the 35th Annual ACM Symposium on User Interface Software and Technology. 1\u201315.",
      "doi": "10.1145/3526113.3545659"
    },
    {
      "text": "Ellen Jiang, Edwin Toh, Alejandra Molina, Kristen Olson, Claire Kayacik, Aaron Donsbach, Carrie\u00a0J Cai, and Michael Terry. 2022. Discovering the syntax and strategies of natural language programming with generative language models. In Proceedings of the 2022 CHI Conference on Human Factors in Computing Systems. 1\u201319.",
      "doi": "10.1145/3491102.3501870"
    },
    {
      "text": "Filiz Kalelio\u011flu. 2015. A new way of teaching programming skills to K-12 students: Code. org. Computers in Human Behavior 52 (2015), 200\u2013210.",
      "doi": "10.1016/j.chb.2015.05.047"
    },
    {
      "text": "Filiz Kalelioglu and Yasemin G\u00fclbahar. 2014. The Effects of Teaching Programming via Scratch on Problem Solving Skills: A Discussion from Learners\u2019 Perspective.Informatics in education 13, 1 (2014), 33\u201350.",
      "doi": ""
    },
    {
      "text": "Majeed Kazemitabaar, Viktar Chyhir, David Weintrop, and Tovi Grossman. 2022. CodeStruct: Design and Evaluation of an Intermediary Programming Environment for Novices to Transition from Scratch to Python. In Interaction Design and Children. 261\u2013273.",
      "doi": ""
    },
    {
      "text": "Majeed Kazemitabaar, Viktar Chyhir, David Weintrop, and Tovi Grossman. 2023. Scaffolding Progress: How Structured Editors Shape Novice Errors When Transitioning from Blocks to Text. In Proceedings of the 54th acm technical symposium on computer science education.",
      "doi": "10.1145/3545945.3569723"
    },
    {
      "text": "Paivi Kinnunen and Beth Simon. 2010. Experiencing programming assignments in CS1: the emotional toll. In Proceedings of the Sixth international workshop on Computing education research. 77\u201386.",
      "doi": "10.1145/1839594.1839609"
    },
    {
      "text": "P\u00e4ivi Kinnunen and Beth Simon. 2011. CS majors\u2019 self-efficacy perceptions in CS1: results in light of social cognitive theory. In Proceedings of the seventh international workshop on Computing education research. 19\u201326.",
      "doi": "10.1145/2016911.2016917"
    },
    {
      "text": "Paul Kirschner, John Sweller, and Richard\u00a0E Clark. 2006. Why unguided learning does not work: An analysis of the failure of discovery learning, problem-based learning, experiential learning and inquiry-based learning. Educational Psychologist 41, 2 (2006), 75\u201386.",
      "doi": ""
    },
    {
      "text": "Roman Kn\u00f6ll and Mira Mezini. 2006. Pegasus: first steps toward a naturalistic programming language. In Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems, languages, and applications. 542\u2013559.",
      "doi": ""
    },
    {
      "text": "Michael K\u00f6lling, Neil\u00a0CC Brown, and Amjad Altadmri. 2015. Frame-based editing: Easing the transition from blocks to text-based programming. In Proceedings of the Workshop in Primary and Secondary Computing Education. 29\u201338.",
      "doi": "10.1145/2818314.2818331"
    },
    {
      "text": "Amruth\u00a0N Kumar. 2013. A study of the influence of code-tracing problems on code-writing skills. In Proceedings of the 18th ACM conference on Innovation and technology in computer science education. 183\u2013188.",
      "doi": "10.1145/2462476.2462507"
    },
    {
      "text": "Mathias Landh\u00e4u\u00dfer, Sebastian Weigelt, and Walter\u00a0F Tichy. 2017. NLCI: a natural language command interpreter. Automated Software Engineering 24 (2017), 839\u2013861.",
      "doi": "10.1007/s10515-016-0202-1"
    },
    {
      "text": "Vu Le, Sumit Gulwani, and Zhendong Su. 2013. Smartsynth: Synthesizing smartphone automation scripts from natural language. In Proceeding of the 11th annual international conference on Mobile systems, applications, and services. 193\u2013206.",
      "doi": "10.1145/2462456.2464443"
    },
    {
      "text": "Irene Lee, Fred Martin, Jill Denner, Bob Coulter, Walter Allan, Jeri Erickson, Joyce Malyn-Smith, and Linda Werner. 2011. Computational thinking for youth in practice. Acm Inroads 2, 1 (2011), 32\u201337.",
      "doi": "10.1145/1929887.1929902"
    },
    {
      "text": "Yujia Li, David Choi, Junyoung Chung, Nate Kushman, Julian Schrittwieser, R\u00e9mi Leblond, Tom Eccles, James Keeling, Felix Gimeno, Agustin Dal\u00a0Lago, 2022. Competition-level code generation with alphacode. Science 378, 6624 (2022), 1092\u20131097.",
      "doi": ""
    },
    {
      "text": "Wang Ling, Edward Grefenstette, Karl\u00a0Moritz Hermann, Tom\u00e1\u0161 Ko\u010disk\u1ef3, Andrew Senior, Fumin Wang, and Phil Blunsom. 2016. Latent predictor networks for code generation. arXiv preprint arXiv:1603.06744(2016).",
      "doi": ""
    },
    {
      "text": "Raymond Lister, Colin Fidge, and Donna Teague. 2009. Further evidence of a relationship between explaining, tracing and writing skills in introductory programming. Acm sigcse bulletin 41, 3 (2009), 161\u2013165.",
      "doi": ""
    },
    {
      "text": "Greg Little and Robert\u00a0C Miller. 2006. Translating keyword commands into executable code. In Proceedings of the 19th annual ACM symposium on User interface software and technology. 135\u2013144.",
      "doi": "10.1145/1166253.1166275"
    },
    {
      "text": "Mike Lopez, Jacqueline Whalley, Phil Robbins, and Raymond Lister. 2008. Relationships between reading, tracing and writing skills in introductory programming. In Proceedings of the fourth international workshop on computing education research. 101\u2013112.",
      "doi": "10.1145/1404520.1404531"
    },
    {
      "text": "Shuai Lu, Daya Guo, Shuo Ren, Junjie Huang, Alexey Svyatkovskiy, Ambrosio Blanco, Colin Clement, Dawn Drain, Daxin Jiang, Duyu Tang, 2021. Codexglue: A machine learning benchmark dataset for code understanding and generation. arXiv preprint arXiv:2102.04664(2021).",
      "doi": ""
    },
    {
      "text": "Andrew Luxton-Reilly, Ibrahim Albluwi, Brett\u00a0A Becker, Michail Giannakos, Amruth\u00a0N Kumar, Linda Ott, James Paterson, Michael\u00a0James Scott, Judy Sheard, and Claudia Szabo. 2018. Introductory programming: a systematic literature review. In Proceedings Companion of the 23rd Annual ACM Conference on Innovation and Technology in Computer Science Education. 55\u2013106.",
      "doi": "10.1145/3293881.3295779"
    },
    {
      "text": "I\u00a0Scott MacKenzie. 2012. Human-computer interaction: An empirical research perspective. (2012).",
      "doi": ""
    },
    {
      "text": "Lauren\u00a0E Margulieux, Mark Guzdial, and Richard Catrambone. 2012. Subgoal-labeled instructional material improves performance and transfer in learning to develop mobile applications. In Proceedings of the ninth annual international conference on International computing education research. 71\u201378.",
      "doi": "10.1145/2361276.2361291"
    },
    {
      "text": "Raymond\u00a0B Miller, Gwendolyn\u00a0N Kelly, and Joseph\u00a0T Kelly. 1988. Effects of Logo computer programming experience on problem solving and spatial relations ability. Contemporary Educational Psychology 13, 4 (1988), 348\u2013357.",
      "doi": ""
    },
    {
      "text": "Brad\u00a0A Myers, John\u00a0F Pane, and Amy\u00a0J Ko. 2004. Natural programming languages and environments. Commun. ACM 47, 9 (2004), 47\u201352.",
      "doi": "10.1145/1015864.1015888"
    },
    {
      "text": "John\u00a0Francis Pane. 2002. A programming system for children that is designed for usability. Carnegie Mellon University.",
      "doi": ""
    },
    {
      "text": "John\u00a0F Pane and Brad\u00a0A Myers. 2006. More natural programming languages and environments. End user development(2006), 31\u201350.",
      "doi": ""
    },
    {
      "text": "Dale Parsons and Patricia Haden. 2006. Parson\u2019s programming puzzles: a fun and effective learning tool for first programming courses. In Proceedings of the 8th Australasian Conference on Computing Education-Volume 52. 157\u2013163.",
      "doi": ""
    },
    {
      "text": "Shahira Popat and Louise Starkey. 2019. Learning to code or coding to learn? A systematic review. Computers & Education 128 (2019), 365\u2013376.",
      "doi": ""
    },
    {
      "text": "David Price, Ellen Rilofff, Joseph Zachary, and Brandon Harvey. 2000. NaturalJava: A natural language interface for programming in Java. In Proceedings of the 5th international conference on Intelligent user interfaces. 207\u2013211.",
      "doi": "10.1145/325737.325845"
    },
    {
      "text": "Sarantos Psycharis and Maria Kallia. 2017. The effects of computer programming on high school students\u2019 reasoning skills and mathematical self-efficacy and problem solving. Instructional science 45, 5 (2017), 583\u2013602.",
      "doi": ""
    },
    {
      "text": "Yizhou Qian and James Lehman. 2017. Students\u2019 misconceptions and other difficulties in introductory programming: A literature review. ACM Transactions on Computing Education (TOCE) 18, 1 (2017), 1\u201324.",
      "doi": "10.1145/3077618"
    },
    {
      "text": "Chris Quirk, Raymond Mooney, and Michel Galley. 2015. Language to code: Learning semantic parsers for if-this-then-that recipes. In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers). 878\u2013888.",
      "doi": ""
    },
    {
      "text": "Mukund Raghothaman, Yi Wei, and Youssef Hamadi. 2016. SWIM: synthesizing what I mean: code search and idiomatic snippet synthesis. In Proceedings of the 38th International Conference on Software Engineering. 357\u2013367.",
      "doi": "10.1145/2884781.2884808"
    },
    {
      "text": "Mohammad Raza, Sumit Gulwani, and Natasa Milic-Frayling. 2015. Compositional program synthesis from natural language and examples. In IJCAI 2015.",
      "doi": "10.5555/2832249.2832359"
    },
    {
      "text": "Alexander Renkl. 2005. The worked-out-example principle in multimedia learning. The Cambridge handbook of multimedia learning (2005), 229\u2013245.",
      "doi": ""
    },
    {
      "text": "Mitchel Resnick. 2014. Give P\u2019sa chance: Projects, peers, passion, play. In Constructionism and creativity: Proceedings of the third international constructionism conference. Austrian computer society, Vienna. 13\u201320.",
      "doi": ""
    },
    {
      "text": "Mitchel Resnick, John Maloney, Andr\u00e9s Monroy-Hern\u00e1ndez, Natalie Rusk, Evelyn Eastmond, Karen Brennan, Amon Millner, Eric Rosenbaum, Jay Silver, Brian Silverman, 2009. Scratch: programming for all. Commun. ACM 52, 11 (2009), 60\u201367.",
      "doi": "10.1145/1592761.1592779"
    },
    {
      "text": "Mitchel Resnick and David Siegel. 2015. A different approach to coding. International Journal of People-Oriented Programming 4, 1(2015), 1\u20134.",
      "doi": ""
    },
    {
      "text": "Ma\u00a0Mercedes\u00a0T Rodrigo and Ryan\u00a0SJd Baker. 2009. Coarse-grained detection of student frustration in an introductory programming course. In Proceedings of the fifth international workshop on Computing education research workshop. 75\u201380.",
      "doi": "10.1145/1584322.1584332"
    },
    {
      "text": "Sami Sarsa, Paul Denny, Arto Hellas, and Juho Leinonen. 2022. Automatic generation of programming exercises and code explanations using large language models. In Proceedings of the 2022 ACM Conference on International Computing Education Research-Volume 1. 27\u201343.",
      "doi": "10.1145/3501385.3543957"
    },
    {
      "text": "Viktor Schlegel, Benedikt Lang, Siegfried Handschuh, and Andr\u00e9 Freitas. 2019. Vajra: step-by-step programming with natural language. In Proceedings of the 24th International Conference on Intelligent User Interfaces. 30\u201339.",
      "doi": "10.1145/3301275.3302267"
    },
    {
      "text": "Teemu Sirki\u00e4 and Juha Sorva. 2012. Exploring programming misconceptions: an analysis of student mistakes in visual program simulation exercises. In Proceedings of the 12th Koli Calling International Conference on Computing Education Research. 19\u201328.",
      "doi": "10.1145/2401796.2401799"
    },
    {
      "text": "Gail\u00a0M Sullivan and Richard Feinn. 2012. Using effect size\u2014or why the P value is not enough. Journal of graduate medical education 4, 3 (2012), 279\u2013282.",
      "doi": ""
    },
    {
      "text": "Jiao Sun, Q\u00a0Vera Liao, Michael Muller, Mayank Agarwal, Stephanie Houde, Kartik Talamadupula, and Justin\u00a0D Weisz. 2022. Investigating explainability of generative AI for code through scenario-based design. In 27th International Conference on Intelligent User Interfaces. 212\u2013228.",
      "doi": "10.1145/3490099.3511119"
    },
    {
      "text": "John Sweller, Jeroen\u00a0JG van Merri\u00ebnboer, and Fred Paas. 2019. Cognitive architecture and instructional design: 20 years later. Educational Psychology Review 31 (2019), 261\u2013292.",
      "doi": ""
    },
    {
      "text": "Tabnine. 2022. Tabnine: AI assistant for software developers. https://www.tabnine.com/. [Online; accessed 9-September-2022].",
      "doi": ""
    },
    {
      "text": "Priyan Vaithilingam, Tianyi Zhang, and Elena\u00a0L Glassman. 2022. Expectation vs. experience: Evaluating the usability of code generation tools powered by large language models. In Chi conference on human factors in computing systems extended abstracts. 1\u20137.",
      "doi": "10.1145/3491101.3519665"
    },
    {
      "text": "Jeroen\u00a0JG Van\u00a0Merri\u00ebnboer, Paul\u00a0A Kirschner, and Liesbeth Kester. 2003. Taking the load off a learner\u2019s mind: Instructional design for complex learning. Educational psychologist 38, 1 (2003), 5\u201313.",
      "doi": ""
    },
    {
      "text": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan\u00a0N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. Advances in neural information processing systems 30 (2017).",
      "doi": ""
    },
    {
      "text": "Lev\u00a0Semenovich Vygotsky and Michael Cole. 1978. Mind in society: Development of higher psychological processes. Harvard university press.",
      "doi": ""
    },
    {
      "text": "Mary Webb, Niki Davis, Tim Bell, Yaacov\u00a0J Katz, Nicholas Reynolds, Dianne\u00a0P Chambers, and Maciej\u00a0M Sys\u0142o. 2017. Computer science in K-12 school curricula of the 2lst century: Why, what and when?Education and Information Technologies 22 (2017), 445\u2013468.",
      "doi": "10.1007/s10639-016-9493-x"
    },
    {
      "text": "Jeannette\u00a0M Wing. 2006. Computational thinking. Commun. ACM 49, 3 (2006), 33\u201335.",
      "doi": "10.1145/1118178.1118215"
    },
    {
      "text": "David Wolber. 2011. App inventor and real-world motivation. In Proceedings of the 42nd ACM technical symposium on Computer science education. 601\u2013606.",
      "doi": "10.1145/1953163.1953329"
    },
    {
      "text": "Pengcheng Yin and Graham Neubig. 2017. A syntactic neural model for general-purpose code generation. arXiv preprint arXiv:1704.01696(2017).",
      "doi": ""
    },
    {
      "text": "Rui Zhi, Min Chi, Tiffany Barnes, and Thomas\u00a0W Price. 2019. Evaluating the effectiveness of parsons problems for block-based programming. In Proceedings of the 2019 ACM Conference on International Computing Education Research. 51\u201359.",
      "doi": "10.1145/3291279.3339419"
    },
    {
      "text": "Victor Zhong, Caiming Xiong, and Richard Socher. 2017. Seq2sql: Generating structured queries from natural language using reinforcement learning. arXiv preprint arXiv:1709.00103(2017).",
      "doi": ""
    }
  ]
}