{
  "doi": "10.1145/3313831.3376494",
  "title": "Projection Boxes: On-the-fly Reconfigurable Visualization for Live Programming",
  "published": "2020-04-23",
  "proctitle": "CHI '20: Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems",
  "pages": "1-7",
  "year": 2020,
  "badges": [],
  "abstract": "Live programming is a regime in which the programming environment provides continual feedback, most often in the form of runtime values. In this paper, we present Projection Boxes, a novel visualization technique for displaying runtime values of programs. The key idea behind projection boxes is to start with a full semantics of the program, and then use projections to pick a subset of the semantics to display. By varying the projection used, projection boxes can encode both previously known visualization techniques, and also new ones. As such, projection boxes provide an expressive and configurable framework for displaying runtime information. Through a user study we demonstrate that (1) users find projection boxes and their configurability useful (2) users are not distracted by the always-on visualization (3) a key driving force behind the need for a configurable visualization for live programming lies with the wide variation in programmer preferences.",
  "tags": [
    "programming environment",
    "debugging",
    "program visualization",
    "live programming"
  ],
  "authors": [
    {
      "name": "Sorin Lerner",
      "institution": "University of California, San Diego, La Jolla, CA, USA",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "81100399150",
      "orcid": "missing"
    }
  ],
  "references": [
    {
      "text": "2019. Alfie. https://alfie.prodo.ai/. (2019). Accessed: 2019-09-01.",
      "doi": ""
    },
    {
      "text": "2019. LightTable. http://lighttable.com/. (2019). Accessed: 2019-09-01.",
      "doi": ""
    },
    {
      "text": "Benjamin Biegel, Benedikt Lesch, and Stephan Diehl. 2015. Live object exploration: Observing and manipulating behavior and state of Java objects. In 2015 IEEE International Conference on Software Maintenance and Evolution (ICSME). 581--585. DOI: http://dx.doi.org/10.1109/ICSM.2015.7332518",
      "doi": "10.1109/ICSM.2015.7332518"
    },
    {
      "text": "Philip J. Guo. 2013. Online Python Tutor: Embeddable Web-based Program Visualization for Cs Education. In Proceeding of the 44th ACM Technical Symposium on Computer Science Education (SIGCSE '13). ACM, NY, NY, USA, 579--584. DOI: http://dx.doi.org/10.1145/2445196.2445368",
      "doi": "10.1145/2445196.2445368"
    },
    {
      "text": "Christopher Michael Hancock. 2003. Real-time Programming and the Big Ideas of Computational Literacy. Ph.D. Dissertation. Cambridge, MA, USA. AAI0805688.",
      "doi": "10.5555/997307"
    },
    {
      "text": "Brian Hempel and Ravi Chugh. 2016. Semi-Automated SVG Programming via Direct Manipulation. In Proceedings of the 29th Annual Symposium on User Interface Software and Technology (UIST '16). ACM, NY, NY, USA, 379--390. DOI: http://dx.doi.org/10.1145/2984511.2984575",
      "doi": "10.1145/2984511.2984575"
    },
    {
      "text": "Brian Hempel, Justin Lubin, and Ravi Chugh. 2019. Sketch-n-Sketch: Output-Directed Programming for SVG. In Proceedings of the 32nd Annual Symposium on User Interface Software and Technology (UIST '19). ACM, NY, NY, USA.",
      "doi": "10.1145/3332165.3347925"
    },
    {
      "text": "Hyeonsu Kang and Philip J. Guo. 2017. Omnicode: A Novice-Oriented Live Programming Environment with Always-On Run-Time Value Visualizations. In Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology (UIST '17). ACM, NY, NY, USA, 737--745. DOI: http://dx.doi.org/10.1145/3126594.3126632",
      "doi": ""
    },
    {
      "text": "Saketh Kasibatla and Alessandro Warth. 2017. Seymour: Live Programming for the Classroom. In International Workshop on Live Programming Worskhop (LIVE 2017).",
      "doi": ""
    },
    {
      "text": "Saketh Ram Kasibatla. 2018. Seymour: A Live Programming Environment for the Classroom. Master's thesis. University of California, Los Angeles.",
      "doi": ""
    },
    {
      "text": "Jan-Peter Kr\u00e4mer, Joachim Kurz, Thorsten Karrer, and Jan O. Borchers. 2014. How live coding affects developers' coding behavior. 2014 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC) (2014), 5--8.",
      "doi": ""
    },
    {
      "text": "Tom Lieber, Joel R. Brandt, and Rob C. Miller. 2014. Addressing Misconceptions About Code with Always-on Programming Visualizations. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI '14). ACM, NY, NY, USA, 2481--2490. DOI: http://dx.doi.org/10.1145/2556288.2557409",
      "doi": ""
    },
    {
      "text": "Mika\u00ebl Mayer, Viktor Kuncak, and Ravi Chugh. 2018. Bidirectional Evaluation with Direct Manipulation. Proc. ACM Program. Lang. 2, OOPSLA, Article 127 (Oct. 2018), 28 pages. DOI: http://dx.doi.org/10.1145/3276497",
      "doi": "10.1145/3276497"
    },
    {
      "text": "Sean McDirmid. 2013. Usable Live Programming. In Proceedings of the 2013 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming & Software (Onward! 2013). ACM, NY, NY, USA, 53--62. DOI: http://dx.doi.org/10.1145/2509578.2509585",
      "doi": "10.1145/2509578.2509585"
    },
    {
      "text": "Cyrus Omar, Ian Voysey, Ravi Chugh, and Matthew A. Hammer. 2019. Live Functional Programming with Typed Holes. Proc. ACM Program. Lang. 3, POPL, Article 14 (Jan. 2019), 32 pages. DOI: http://dx.doi.org/10.1145/3290327",
      "doi": ""
    },
    {
      "text": "David Rauch, Patrick Rein, Stefan Ramson, Jens Lincke, and Robert Hirschfeld. 2019. Babylonian-style Programming: Design and Implementation of an Integration of Live Examples Into General-purpose Source Code. The Art, Science, and Engineering of Programming 3, 3 (2019).",
      "doi": ""
    },
    {
      "text": "Patrick Rein, Jens Lincke, Stefan Ramson, Toni Mattis, Fabio Niephaus, and Robert Hirschfeld. 2019. Implementing Babylonian/S by Putting Examples Into Contexts: Tracing Instrumentation for Example-based Live Programming As a Use Case for Context-oriented Programming. In Proceedings of the Workshop on Context-oriented Programming (COP '19). ACM, NY, NY, USA, 17--23. DOI: http://dx.doi.org/10.1145/3340671.3343358",
      "doi": "10.1145/3340671.3343358"
    },
    {
      "text": "S. L. Tanimoto. 2013. A perspective on the evolution of live programming. In 2013 1st International Workshop on Live Programming (LIVE). 31--34. DOI: http://dx.doi.org/10.1109/LIVE.2013.6617346",
      "doi": "10.5555/2662726.2662735"
    },
    {
      "text": "Bret Victor. 2012a. Inventing on Principle. (2012). https://vimeo.com/36579366#t=18m05s",
      "doi": ""
    },
    {
      "text": "Bret Victor. 2012b. Learnable Programming. (2012). http://worrydream.com/LearnableProgramming/",
      "doi": ""
    },
    {
      "text": "E. M. Wilcox, J. W. Atwood, M. M. Burnett, J. J. Cadiz, and C. R. Cook. 1997. Does Continuous Visual Feedback Aid Debugging in Direct-manipulation Programming Systems?. In Proceedings of the ACM SIGCHI Conference on Human Factors in Computing Systems (CHI '97). ACM, NY, NY, USA, 258--265. DOI: http://dx.doi.org/10.1145/258549.258721",
      "doi": ""
    }
  ]
}