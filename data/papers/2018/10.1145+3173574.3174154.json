{
  "doi": "10.1145/3173574.3174154",
  "title": "Visualizing API Usage Examples at Scale",
  "published": "2018-04-21",
  "proctitle": "CHI '18: Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems",
  "pages": "1-12",
  "year": 2018,
  "badges": [],
  "abstract": "Using existing APIs properly is a key challenge in programming, given that libraries and APIs are increasing in number and complexity. Programmers often search for online code examples in Q&A forums and read tutorials and blog posts to learn how to use a given API. However, there are often a massive number of related code examples and it is difficult for a user to understand the commonalities and variances among them, while being able to drill down to concrete details. We introduce an interactive visualization for exploring a large collection of code examples mined from open-source repositories at scale. This visualization summarizes hundreds of code examples in one synthetic code skeleton with statistical distributions for canonicalized statements and structures enclosing an API call. We implemented this interactive visualization for a set of Java APIs and found that, in a lab study, it helped users (1) answer significantly more API usage questions correctly and comprehensively and (2) explore how other programmers have used an unfamiliar API.",
  "tags": [
    "code examples",
    "interactive visualization",
    "api",
    "programming support"
  ],
  "authors": [
    {
      "name": "Elena L. Glassman",
      "institution": "University of California, Berkeley, Berkeley, CA, USA",
      "img": "/do/10.1145/contrib-82658918057/rel-imgonly/glassman_200x300.jpg",
      "acmid": "82658918057",
      "orcid": "0000-0001-5178-3496"
    },
    {
      "name": "Tianyi Zhang",
      "institution": "University of California, Los Angeles, Los Angeles, CA, USA",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99658654086",
      "orcid": "0000-0002-5468-9347"
    },
    {
      "name": "Bj\u00f6rn Hartmann",
      "institution": "University of California, Berkeley, Berkeley, CA, USA",
      "img": "/do/10.1145/contrib-81318498266/rel-imgonly/headshot2010_130.jpg",
      "acmid": "81318498266",
      "orcid": "0000-0002-0693-0829"
    },
    {
      "name": "Miryung Kim",
      "institution": "University of California, Los Angeles, Los Angeles, CA, USA",
      "img": "/do/10.1145/contrib-81335492829/rel-imgonly/miryungkimphotoaugust2018.png",
      "acmid": "81335492829",
      "orcid": "missing"
    }
  ],
  "references": [
    {
      "text": "Frances E Allen. 1970. Control flow analysis. In ACM Sigplan Notices, Vol. 5. ACM, 1--19.  ",
      "doi": "10.1145/390013.808479"
    },
    {
      "text": "Glenn Ammons, Rastislav Bod\u00edk, and James R Larus. 2002. Mining specifications. ACM Sigplan Notices 37, 1 (2002), 4--16.  ",
      "doi": "10.1145/565816.503275"
    },
    {
      "text": "Joel Brandt, Philip J Guo, Joel Lewenstein, Mira Dontcheva, and Scott R Klemmer. 2009. Two studies of opportunistic programming: interleaving web foraging, learning, and writing code. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. ACM, 1589--1598.  ",
      "doi": "10.1145/1518701.1518944"
    },
    {
      "text": "Raymond PL Buse and Westley Weimer. 2012. Synthesizing API usage examples. In Software Engineering (ICSE), 2012 34th International Conference on. IEEE, 782--792. ",
      "doi": "10.5555/2337223.2337316"
    },
    {
      "text": "Ekwa Duala-Ekoko and Martin P Robillard. 2012. Asking and answering questions about unfamiliar APIs: An exploratory study. In Proceedings of the 34th International Conference on Software Engineering. IEEE Press, 266--276. ",
      "doi": "10.5555/2337223.2337255"
    },
    {
      "text": "Robert Dyer, Hoan Anh Nguyen, Hridesh Rajan, and Tien N Nguyen. 2013. Boa: A language and infrastructure for analyzing ultra-large-scale software repositories. In Proceedings of the 2013 International Conference on Software Engineering. IEEE Press, 422--431. ",
      "doi": "10.5555/2486788.2486844"
    },
    {
      "text": "Felix Fischer, Konstantin B\u00f6ttinger, Huang Xiao, Christian Stransky, Yasemin Acar, Michael Backes, and Sascha Fahl. 2017. Stack Overflow Considered Harmful? The Impact of Copy&Paste on Android Application Security. In Security and Privacy (SP), 2017 IEEE Symposium on. IEEE, 121--136.",
      "doi": ""
    },
    {
      "text": "Elena L Glassman, Jeremy Scott, Rishabh Singh, Philip J Guo, and Robert C Miller. 2015. OverCode: Visualizing variation in student solutions to programming problems at scale. ACM Transactions on Computer-Human Interaction (TOCHI) 22, 2 (2015), 7.  ",
      "doi": "10.1145/2699751"
    },
    {
      "text": "Natalie Gruska, Andrzej Wasylkowski, and Andreas Zeller. 2010. Learning from 6,000 projects: lightweight cross-project anomaly detection. In Proceedings of the 19th international symposium on Software testing and analysis. ACM, 119--130.  ",
      "doi": "10.1145/1831708.1831723"
    },
    {
      "text": "Raphael Hoffmann, James Fogarty, and Daniel S Weld. 2007. Assieme: finding and leveraging implicit references in a web search interface for programmers. In Proceedings of the 20th annual ACM symposium on User interface software and technology. ACM, 13--22.  ",
      "doi": "10.1145/1294211.1294216"
    },
    {
      "text": "Andrew J Ko, Brad A Myers, and Htet Htet Aung. 2004. Six learning barriers in end-user programming systems. In Visual Languages and Human Centric Computing, 2004 IEEE Symposium on. IEEE, 199--206.  ",
      "doi": "10.1109/VLHCC.2004.47"
    },
    {
      "text": "Nicholas Kong, Tovi Grossman, Bj\u00f6rn Hartmann, Maneesh Agrawala, and George Fitzmaurice. 2012. Delta: a tool for representing and comparing workflows. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. ACM, 1027--1036.  ",
      "doi": "10.1145/2207676.2208549"
    },
    {
      "text": "Zhenmin Li and Yuanyuan Zhou. 2005. PR-Miner: automatically extracting implicit programming rules and detecting violations in large software code. In ACM SIGSOFT Software Engineering Notes, Vol. 30. ACM, 306--315.  ",
      "doi": "10.1145/1095430.1081755"
    },
    {
      "text": "Martin Monperrus, Marcel Bruch, and Mira Mezini. 2010. Detecting missing method calls in object-oriented software. In European Conference on Object-Oriented Programming. Springer, 2--25. ",
      "doi": "10.5555/1883978.1883982"
    },
    {
      "text": "Jo\u00e3o Eduardo Montandon, Hudson Borges, Daniel Felix, and Marco Tulio Valente. 2013. Documenting apis with examples: Lessons learned with the apiminer platform. In Reverse Engineering (WCRE), 2013 20th Working Conference on. IEEE, 401--408.",
      "doi": ""
    },
    {
      "text": "Tung Thanh Nguyen, Hoan Anh Nguyen, Nam H. Pham, Jafar M. Al-Kofahi, and Tien N. Nguyen. 2009. Graph-based Mining of Multiple Object Usage Patterns. In Proceedings of the the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering (ESEC/FSE '09). ACM, New York, NY, USA, 383--392.  ",
      "doi": "10.1145/1595696.1595767"
    },
    {
      "text": "Amy Pavel, Floraine Berthouzoz, Bj\u00f6rn Hartmann, and Maneesh Agrawala. 2013. Browsing and analyzing the command-level structure of large collections of image manipulation tutorials. Citeseer, Tech. Rep. (2013).",
      "doi": ""
    },
    {
      "text": "Michael Pradel and Thomas R Gross. 2009. Automatic generation of object usage specifications from large method traces. In Proceedings of the 2009 IEEE/ACM International Conference on Automated Software Engineering. IEEE Computer Society, 371--382.  ",
      "doi": "10.1109/ASE.2009.60"
    },
    {
      "text": "Martin P Robillard. 2009. What makes APIs hard to learn? Answers from developers. IEEE software 26, 6 (2009).  ",
      "doi": "10.1109/MS.2009.193"
    },
    {
      "text": "Caitlin Sadowski, Kathryn T Stolee, and Sebastian Elbaum. 2015. How developers search for code: a case study. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering. ACM, 191--201.  ",
      "doi": "10.1145/2786805.2786855"
    },
    {
      "text": "Aditi Shrikumar. 2013. Designing an Exploratory Text Analysis Tool for Humanities and Social Sciences Research. University of California, Berkeley.",
      "doi": ""
    },
    {
      "text": "Susan Elliott Sim, Medha Umarji, Sukanya Ratanotayanon, and Cristina V Lopes. 2011. How well do search engines support code retrieval on the web? ACM Transactions on Software Engineering and Methodology (TOSEM) 21, 1 (2011), 4.  ",
      "doi": "10.1145/2063239.2063243"
    },
    {
      "text": "Jamie Starke, Chris Luce, and Jonathan Sillito. 2009. Working with search results. In Search-Driven Development-Users, Infrastructure, Tools and Evaluation, 2009. SUITE'09. ICSE Workshop on. IEEE, 53--56.  ",
      "doi": "10.1109/SUITE.2009.5070023"
    },
    {
      "text": "Suresh Thummalapenta and Tao Xie. 2011. Alattin: mining alternative patterns for defect detection. Automated Software Engineering 18, 3 (2011), 293.  ",
      "doi": "10.1007/s10515-011-0086-z"
    },
    {
      "text": "Christoph Treude and Martin P Robillard. 2017. Understanding Stack Overflow Code Fragments. In Proceedings of the 33rd International Conference on Software Maintenance and Evolution. IEEE.",
      "doi": ""
    },
    {
      "text": "Jue Wang, Yingnong Dang, Hongyu Zhang, Kai Chen, Tao Xie, and Dongmei Zhang. 2013. Mining succinct and high-coverage API usage patterns from source code. In Proceedings of the 10th Working Conference on Mining Software Repositories. IEEE Press, 319--328. ",
      "doi": "10.5555/2487085.2487146"
    },
    {
      "text": "Martin Wattenberg and Fernanda B Vi\u00e9gas. 2008. The word tree, an interactive visual concordance. IEEE transactions on visualization and computer graphics 14, 6 (2008).  ",
      "doi": "10.1109/TVCG.2008.172"
    },
    {
      "text": "Mark Weiser. 1981. Program slicing. In Proceedings of the 5th international conference on Software engineering. IEEE Press, 439--449. ",
      "doi": "10.5555/800078.802557"
    },
    {
      "text": "Tianyi Zhang, Ganesha Upadhyaya, Anastasia Reinhardt, Hridesh Rajan, and Miryung Kim. 2018. Are Code Examples on an Online QA Forum Reliable? A Study of API Misuse on Stack Overflow. In Proceedings of the 40th International Conference on Software Engineering. ACM.",
      "doi": "10.1145/3180155.3180260"
    },
    {
      "text": "Hao Zhong, Tao Xie, Lu Zhang, Jian Pei, and Hong Mei. 2009. MAPO: Mining and recommending API usage patterns. In European Conference on Object-Oriented Programming. Springer, 318--343.  ",
      "doi": "10.1007/978-3-642-03013-0_15"
    },
    {
      "text": "Jing Zhou and Robert J Walker. 2016. API deprecation: a retrospective analysis and detection method for code examples on the web. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, 266--277.  ",
      "doi": "10.1145/2950290.2950298"
    }
  ]
}