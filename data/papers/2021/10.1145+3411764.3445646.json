{
  "doi": "10.1145/3411764.3445646",
  "title": "Interpretable Program Synthesis",
  "published": "2021-05-07",
  "proctitle": "CHI '21: Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems",
  "pages": "1-16",
  "year": 2021,
  "badges": [],
  "abstract": "Program synthesis, which generates programs based on user-provided specifications, can be obscure and brittle: users have few ways to understand and recover from synthesis failures. We propose interpretable program synthesis, a novel approach that unveils the synthesis process and enables users to monitor and guide a synthesizer. We designed three representations that explain the underlying synthesis process with different levels of fidelity. We implemented an interpretable synthesizer for regular expressions and conducted a within-subjects study with eighteen participants on three challenging regex tasks. With interpretable synthesis, participants were able to reason about synthesis failures and provide strategic feedback, achieving a significantly higher success rate compared with a state-of-the-art synthesizer. In particular, participants with a high engagement tendency (as measured by NCS-6) preferred a deductive representation that shows the synthesis process in a search tree, while participants with a relatively low engagement tendency preferred an inductive representation that renders representative samples of programs enumerated during synthesis.",
  "authors": [
    {
      "name": "Tianyi Zhang",
      "institution": "Harvard University, United States",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99658654086",
      "orcid": "0000-0002-5468-9347"
    },
    {
      "name": "Zhiyang Chen",
      "institution": "University of Michigan, United States",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99659702082",
      "orcid": "missing"
    },
    {
      "name": "Yuanli Zhu",
      "institution": "University of Michigan, United States",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99659700987",
      "orcid": "missing"
    },
    {
      "name": "Priyan Vaithilingam",
      "institution": "Harvard University, United States",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99659260410",
      "orcid": "missing"
    },
    {
      "name": "Xinyu Wang",
      "institution": "University of Michigan, United States",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99659538949",
      "orcid": "missing"
    },
    {
      "name": "Elena L. Glassman",
      "institution": "Harvard University, United States",
      "img": "/do/10.1145/contrib-82658918057/rel-imgonly/glassman_200x300.jpg",
      "acmid": "82658918057",
      "orcid": "0000-0001-5178-3496"
    }
  ],
  "references": [
    {
      "text": "[n.d.]. Regular expression to check comma separted number values in Flex. https://stackoverflow.com/questions/5262196/regular-expression-to-check-comma-separted-number-values-in-flex. Accessed: 2020-07-21.",
      "doi": ""
    },
    {
      "text": "[n.d.]. SetCoverPy: A heuristic solver for the set cover problem. https://github.com/guangtunbenzhu/SetCoverPy. Accessed: 2020-06-04.",
      "doi": ""
    },
    {
      "text": "Robin Abraham and Martin Erwig. 2005. Goal-directed debugging of spreadsheets. In 2005 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC\u201905). IEEE, 37\u201344.",
      "doi": "10.1109/VLHCC.2005.42"
    },
    {
      "text": "Aws Albarghouthi, Sumit Gulwani, and Zachary Kincaid. 2013. Recursive program synthesis. In International conference on computer aided verification. Springer, 934\u2013950.",
      "doi": ""
    },
    {
      "text": "Rajeev Alur, Rastislav Bodik, Garvit Juniwal, Milo\u00a0MK Martin, Mukund Raghothaman, Sanjit\u00a0A Seshia, Rishabh Singh, Armando Solar-Lezama, Emina Torlak, and Abhishek Udupa. 2013. Syntax-guided synthesis. IEEE.",
      "doi": ""
    },
    {
      "text": "Rajeev Alur, Arjun Radhakrishna, and Abhishek Udupa. 2017. Scaling enumerative program synthesis via divide and conquer. In International Conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 319\u2013336.",
      "doi": ""
    },
    {
      "text": "Matej Balog, Alexander\u00a0L Gaunt, Marc Brockschmidt, Sebastian Nowozin, and Daniel Tarlow. 2016. Deepcoder: Learning to write programs. arXiv preprint arXiv:1611.01989(2016).",
      "doi": ""
    },
    {
      "text": "Carl Chapman and Kathryn\u00a0T Stolee. 2016. Exploring regular expression usage and context in Python. In Proceedings of the 25th International Symposium on Software Testing and Analysis. 282\u2013293.",
      "doi": "10.1145/2931037.2931073"
    },
    {
      "text": "Carl Chapman, Peipei Wang, and Kathryn\u00a0T Stolee. 2017. Exploring regular expression comprehension. In 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 405\u2013416.",
      "doi": ""
    },
    {
      "text": "Sarah\u00a0E Chasins, Maria Mueller, and Rastislav Bodik. 2018. Rousillon: Scraping Distributed Hierarchical Web Data. In Proceedings of the 31st Annual ACM Symposium on User Interface Software and Technology. 963\u2013975.",
      "doi": "10.1145/3242587.3242661"
    },
    {
      "text": "Jiun-Hung Chen and Daniel\u00a0S Weld. 2008. Recovering from errors during programming by demonstration. In Proceedings of the 13th international conference on Intelligent user interfaces. 159\u2013168.",
      "doi": "10.1145/1378773.1378794"
    },
    {
      "text": "Qiaochu Chen, Xinyu Wang, Xi Ye, Greg Durrett, and Isil Dillig. 2020. Multi-modal Synthesis of Regular Expressions. In Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation(PLDI).",
      "doi": "10.1145/3385412.3385988"
    },
    {
      "text": "Allen Cypher. 1995. Eager: Programming repetitive tasks by example. In Readings in human\u2013computer interaction. Elsevier, 804\u2013810.",
      "doi": ""
    },
    {
      "text": "Allen Cypher and Daniel\u00a0Conrad Halbert. 1993. Watch what I do: programming by demonstration. MIT press.",
      "doi": "10.5555/168080"
    },
    {
      "text": "Ian Drosos, Titus Barik, Philip\u00a0J Guo, Robert DeLine, and Sumit Gulwani. 2020. Wrex: A Unified Programming-by-Example Interaction for Synthesizing Readable Code for Data Scientists. In Proceedings of the 2020 CHI conference on human factors in computing systems. 6038\u20136049.",
      "doi": "10.1145/3313831.3376442"
    },
    {
      "text": "Loris D\u2019Antoni, Roopsha Samanta, and Rishabh Singh. 2016. Qlose: Program repair with quantitative objectives. In International Conference on Computer Aided Verification. Springer, 383\u2013401.",
      "doi": ""
    },
    {
      "text": "Kevin Ellis, Armando Solar-Lezama, and Josh Tenenbaum. 2016. Sampling for bayesian program learning. In Advances in Neural Information Processing Systems. 1297\u20131305.",
      "doi": ""
    },
    {
      "text": "Yu Feng, Ruben Martins, Osbert Bastani, and Isil Dillig. 2018. Program synthesis using conflict-driven learning. ACM SIGPLAN Notices 53, 4 (2018), 420\u2013435.",
      "doi": "10.1145/3296979.3192382"
    },
    {
      "text": "Yu Feng, Ruben Martins, Jacob Van\u00a0Geffen, Isil Dillig, and Swarat Chaudhuri. 2017. Component-based synthesis of table consolidation and transformation tasks from examples. ACM SIGPLAN Notices 52, 6 (2017), 422\u2013436.",
      "doi": "10.1145/3140587.3062351"
    },
    {
      "text": "Yu Feng, Ruben Martins, Jacob Van\u00a0Geffen, Isil Dillig, and Swarat Chaudhuri. 2017. Component-based synthesis of table consolidation and transformation tasks from examples. ACM SIGPLAN Notices 52, 6 (2017), 422\u2013436.",
      "doi": "10.1145/3140587.3062351"
    },
    {
      "text": "John\u00a0K Feser, Swarat Chaudhuri, and Isil Dillig. 2015. Synthesizing data structure transformations from input-output examples. ACM SIGPLAN Notices 50, 6 (2015), 229\u2013239.",
      "doi": "10.1145/2813885.2737977"
    },
    {
      "text": "Elena\u00a0L Glassman, Tianyi Zhang, Bj\u00f6rn Hartmann, and Miryung Kim. 2018. Visualizing API usage examples at scale. In Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems. 1\u201312.",
      "doi": "10.1145/3173574.3174154"
    },
    {
      "text": "Cordell Green. 1981. Application of theorem proving to problem solving. In Readings in Artificial Intelligence. Elsevier, 202\u2013222.",
      "doi": ""
    },
    {
      "text": "Sumit Gulwani. 2011. Automating string processing in spreadsheets using input-output examples. ACM Sigplan Notices 46, 1 (2011), 317\u2013330.",
      "doi": "10.1145/1925844.1926423"
    },
    {
      "text": "Sumit Gulwani, William\u00a0R Harris, and Rishabh Singh. 2012. Spreadsheet data manipulation using examples. Commun. ACM 55, 8 (2012), 97\u2013105.",
      "doi": "10.1145/2240236.2240260"
    },
    {
      "text": "Sumit Gulwani, Jos\u00e9 Hern\u00e1ndez-Orallo, Emanuel Kitzelmann, Stephen\u00a0H Muggleton, Ute Schmid, and Benjamin Zorn. 2015. Inductive programming meets the real world. Commun. ACM 58, 11 (2015), 90\u201399.",
      "doi": "10.1145/2736282"
    },
    {
      "text": "Sumit Gulwani, Oleksandr Polozov, Rishabh Singh, 2017. Program synthesis. Foundations and Trends\u00ae in Programming Languages 4, 1-2(2017), 1\u2013119.",
      "doi": ""
    },
    {
      "text": "Daniel\u00a0C Halbert. 1993. SmallStar: programming by demonstration in the desktop metaphor. In Watch what I do: Programming by demonstration. 103\u2013123.",
      "doi": ""
    },
    {
      "text": "Sandra\u00a0G Hart and Lowell\u00a0E Staveland. 1988. Development of NASA-TLX (Task Load Index): Results of empirical and theoretical research. In Advances in psychology. Vol.\u00a052. Elsevier, 139\u2013183.",
      "doi": ""
    },
    {
      "text": "Jane Hoffswell, Arvind Satyanarayan, and Jeffrey Heer. 2016. Visual debugging techniques for reactive data visualization. In Computer Graphics Forum, Vol.\u00a035. Wiley Online Library, 271\u2013280.",
      "doi": ""
    },
    {
      "text": "Jinseong Jeon, Xiaokang Qiu, Armando Solar-Lezama, and Jeffrey\u00a0S Foster. 2015. Adaptive concretization for parallel program synthesis. In International Conference on Computer Aided Verification. Springer, 377\u2013394.",
      "doi": ""
    },
    {
      "text": "Susmit Jha, Sumit Gulwani, Sanjit\u00a0A Seshia, and Ashish Tiwari. 2010. Oracle-guided component-based program synthesis. In 2010 ACM/IEEE 32nd International Conference on Software Engineering, Vol.\u00a01. IEEE, 215\u2013224.",
      "doi": "10.1145/1806799.1806833"
    },
    {
      "text": "Andrew\u00a0J Ko and Brad\u00a0A Myers. 2004. Designing the whyline: a debugging interface for asking questions about program behavior. In Proceedings of the SIGCHI conference on Human factors in computing systems. 151\u2013158.",
      "doi": "10.1145/985692.985712"
    },
    {
      "text": "John\u00a0R Koza and John\u00a0R Koza. 1992. Genetic programming: on the programming of computers by means of natural selection. Vol.\u00a01. MIT press.",
      "doi": ""
    },
    {
      "text": "Todd Kulesza, Simone Stumpf, Margaret Burnett, Sherry Yang, Irwin Kwan, and Weng-Keen Wong. 2013. Too much, too little, or just right? Ways explanations impact end users\u2019 mental models. In 2013 IEEE Symposium on Visual Languages and Human Centric Computing. IEEE, 3\u201310.",
      "doi": ""
    },
    {
      "text": "Tessa Lau. 2009. Why programming-by-demonstration systems fail: Lessons learned for usable ai. AI Magazine 30, 4 (2009), 65\u201365.",
      "doi": ""
    },
    {
      "text": "Tessa Lau, Steven\u00a0A Wolfman, Pedro Domingos, and Daniel\u00a0S Weld. 2003. Programming by demonstration using version space algebra. Machine Learning 53, 1-2 (2003), 111\u2013156.",
      "doi": "10.1023/A%3A1025671410623"
    },
    {
      "text": "Vu Le and Sumit Gulwani. 2014. FlashExtract: a framework for data extraction by examples. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation. 542\u2013553.",
      "doi": "10.1145/2594291.2594333"
    },
    {
      "text": "Tak\u00a0Yeon Lee, Casey Dugan, and Benjamin\u00a0B Bederson. 2017. Towards understanding human mistakes of programming by example: an online user study. In Proceedings of the 22Nd International Conference on Intelligent User Interfaces. 257\u2013261.",
      "doi": "10.1145/3025171.3025203"
    },
    {
      "text": "Woosuk Lee, Kihong Heo, Rajeev Alur, and Mayur Naik. 2018. Accelerating search-based program synthesis using learned probabilistic models. ACM SIGPLAN Notices 53, 4 (2018), 436\u2013449.",
      "doi": "10.1145/3296979.3192410"
    },
    {
      "text": "Gilly Leshed, Eben\u00a0M Haber, Tara Matthews, and Tessa Lau. 2008. CoScripter: automating & sharing how-to knowledge in the enterprise. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. 1719\u20131728.",
      "doi": "10.1145/1357054.1357323"
    },
    {
      "text": "Toby Jia-Jun Li, Amos Azaria, and Brad\u00a0A Myers. 2017. SUGILITE: creating multimodal smartphone automation by demonstration. In Proceedings of the 2017 CHI conference on human factors in computing systems. 6038\u20136049.",
      "doi": ""
    },
    {
      "text": "Henry Lieberman. 2001. Your wish is my command: Programming by example. Morgan Kaufmann.",
      "doi": ""
    },
    {
      "text": "Gabriel Lins\u00a0de Holanda\u00a0Coelho, Paul HP\u00a0Hanel, and Lukas J.\u00a0Wolf. 2018. The very efficient assessment of need for cognition: Developing a six-item version. Assessment (2018), 1073191118793208.",
      "doi": ""
    },
    {
      "text": "Zohar Manna and Richard\u00a0J Waldinger. 1971. Toward automatic program synthesis. Commun. ACM 14, 3 (1971), 151\u2013165.",
      "doi": "10.1145/362566.362568"
    },
    {
      "text": "Mika\u00ebl Mayer, Gustavo Soares, Maxim Grechkin, Vu Le, Mark Marron, Oleksandr Polozov, Rishabh Singh, Benjamin Zorn, and Sumit Gulwani. 2015. User interaction models for disambiguation in programming by example. In Proceedings of the 28th Annual ACM Symposium on User Interface Software & Technology. 291\u2013301.",
      "doi": "10.1145/2807442.2807459"
    },
    {
      "text": "Robert\u00a0C Miller and Brad\u00a0A Myers. 2001. Outlier finding: Focusing user attention on possible errors. In Proceedings of the 14th annual ACM symposium on User interface software and technology. 81\u201390.",
      "doi": "10.1145/502348.502361"
    },
    {
      "text": "Francesmary Modugno and Brad\u00a0A. Myers. 1997. Visual programming in a visual shell\u2014A unified approach. Journal of Visual Languages & Computing 8, 5-6 (1997), 491\u2013522.",
      "doi": ""
    },
    {
      "text": "Brad\u00a0A Myers. 1990. Creating user interfaces using programming by example, visual programming, and constraints. ACM Transactions on Programming Languages and Systems (TOPLAS) 12, 2(1990), 143\u2013177.",
      "doi": "10.1145/78942.78943"
    },
    {
      "text": "Brad\u00a0A Myers. 1991. Graphical techniques in a spreadsheet for specifying user interfaces. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. 243\u2013249.",
      "doi": "10.1145/108844.108903"
    },
    {
      "text": "Brad\u00a0A Myers. 1998. Scripting graphical applications by demonstration. In Proceedings of the SIGCHI conference on Human factors in computing systems. 534\u2013541.",
      "doi": "10.1145/274644.274716"
    },
    {
      "text": "Brad\u00a0A Myers and Richard McDaniel. 2001. Demonstrational interfaces: sometimes you need a little intelligence, sometimes you need a lot. In Your wish is my command. Morgan Kaufmann Publishers Inc., 45\u201360.",
      "doi": ""
    },
    {
      "text": "Brad\u00a0A Myers, Richard\u00a0G McDaniel, and David\u00a0S Kosbie. 1993. Marquise: Creating complete user interfaces by demonstration. In Proceedings of the INTERACT\u201993 and CHI\u201993 Conference on Human Factors in Computing Systems. 293\u2013300.",
      "doi": "10.1145/169059.169225"
    },
    {
      "text": "Brad\u00a0A Myers, Brad\u00a0Vandcr Zanden, and Roger\u00a0B Dannenberg. 1989. Creating graphical interactive application objects by demonstration. In Proceedings of the 2nd annual ACM SIGGRAPH symposium on User interface software and technology. 95\u2013104.",
      "doi": "10.1145/73660.73672"
    },
    {
      "text": "Saswat Padhi, Todd Millstein, Aditya Nori, and Rahul Sharma. 2019. Overfitting in synthesis: Theory and practice. In International Conference on Computer Aided Verification. Springer, 315\u2013334.",
      "doi": ""
    },
    {
      "text": "Rajesh Parekh and Vasant Honavar. 1996. An incremental interactive algorithm for regular grammar inference. In International Colloquium on Grammatical Inference. Springer, 238\u2013249.",
      "doi": ""
    },
    {
      "text": "Hila Peleg and Nadia Polikarpova. 2020. Perfect is the Enemy of Good: Best-Effort Program Synthesis. (2020), 30 pages.",
      "doi": ""
    },
    {
      "text": "Hila Peleg, Sharon Shoham, and Eran Yahav. 2018. Programming not only by example. In 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE). IEEE, 1114\u20131124.",
      "doi": "10.1145/3180155.3180189"
    },
    {
      "text": "Khoo\u00a0Yit Phang, Jeffrey\u00a0S Foster, and Michael Hicks. 2013. Expositor: scriptable time-travel debugging with first-class traces. In 2013 35th International Conference on Software Engineering (ICSE). IEEE, 352\u2013361.",
      "doi": ""
    },
    {
      "text": "Veselin Raychev, Pavol Bielik, Martin Vechev, and Andreas Krause. 2016. Learning Programs from Noisy Data. SIGPLAN Not. 51, 1 (Jan. 2016), 761\u2013774. https://doi.org/10.1145/2914770.2837671",
      "doi": "10.1145/2914770.2837671"
    },
    {
      "text": "Mitchel Resnick, John Maloney, Andr\u00e9s Monroy-Hern\u00e1ndez, Natalie Rusk, Evelyn Eastmond, Karen Brennan, Amon Millner, Eric Rosenbaum, Jay Silver, Brian Silverman, 2009. Scratch: programming for all. Commun. ACM 52, 11 (2009), 60\u201367.",
      "doi": "10.1145/1592761.1592779"
    },
    {
      "text": "Joseph\u00a0R Ruthruff, Amit Phalgune, Laura Beckwith, Margaret Burnett, and Curtis Cook. 2004. Rewarding\u201d Good\u201d Behavior: End-User Debugging and Rewards. In 2004 IEEE Symposium on Visual Languages-Human Centric Computing. IEEE, 115\u2013122.",
      "doi": ""
    },
    {
      "text": "Eric Schkufza, Rahul Sharma, and Alex Aiken. 2013. Stochastic superoptimization. ACM SIGARCH Computer Architecture News 41, 1 (2013), 305\u2013316.",
      "doi": "10.1145/2490301.2451150"
    },
    {
      "text": "Eric Spishak, Werner Dietl, and Michael\u00a0D Ernst. 2012. A type system for regular expressions. In Proceedings of the 14th Workshop on Formal Techniques for Java-like Programs. 20\u201326.",
      "doi": "10.1145/2318202.2318207"
    },
    {
      "text": "Amanda Swearngin, Chenglong Wang, Alannah Oleson, James Fogarty, and Amy\u00a0J Ko. 2020. Scout: Rapid Exploration of Interface Layout Alternatives through High-Level Design Constraints. In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems. 1\u201313.",
      "doi": "10.1145/3313831.3376593"
    },
    {
      "text": "Abhishek Udupa, Arun Raghavan, Jyotirmoy\u00a0V Deshmukh, Sela Mador-Haim, Milo\u00a0MK Martin, and Rajeev Alur. 2013. TRANSIT: specifying protocols with concolic snippets. ACM SIGPLAN Notices 48, 6 (2013), 287\u2013296.",
      "doi": "10.1145/2499370.2462174"
    },
    {
      "text": "Earl\u00a0J Wagner and Henry Lieberman. 2004. Supporting user hypotheses in problem diagnosis. In Proceedings of the 9th international conference on Intelligent user interfaces. 30\u201337.",
      "doi": "10.1145/964442.964450"
    },
    {
      "text": "Richard\u00a0J Waldinger and Richard\u00a0CT Lee. 1969. PROW: A step toward automatic program writing. In Proceedings of the 1st international joint conference on Artificial intelligence. 241\u2013252.",
      "doi": ""
    },
    {
      "text": "Chenglong Wang, Alvin Cheung, and Rastislav Bodik. 2017. Interactive query synthesis from input-output examples. In Proceedings of the 2017 ACM International Conference on Management of Data. 1631\u20131634.",
      "doi": "10.1145/3035918.3058738"
    },
    {
      "text": "Chenglong Wang, Yu Feng, Rastislav Bodik, Alvin Cheung, and Isil Dillig. 2019. Visualization by Example. Proc. ACM Program. Lang. 4, POPL, Article 49 (Dec. 2019), 28\u00a0pages. https://doi.org/10.1145/3371117",
      "doi": ""
    },
    {
      "text": "Chenglong Wang, Yu Feng, Rastislav Bodik, Alvin Cheung, and Isil Dillig. 2019. Visualization by example. Proceedings of the ACM on Programming Languages 4, POPL(2019), 1\u201328.",
      "doi": ""
    },
    {
      "text": "Xinyu Wang, Sumit Gulwani, and Rishabh Singh. 2016. FIDEX: filtering spreadsheet data using examples. ACM SIGPLAN Notices 51, 10 (2016), 195\u2013213.",
      "doi": "10.1145/3022671.2984030"
    },
    {
      "text": "Tianyi Zhang, London Lowmanstone, Xinyu Wang, and Elena\u00a0L Glassman. 2020. Interactive Program Synthesis by Augmented Examples. In Proceedings of the 33rd Annual ACM Symposium on User Interface Software and Technology. 627\u2013648.",
      "doi": "10.1145/3379337.3415900"
    }
  ]
}