{
  "doi": "10.1145/169059.169082",
  "title": "Reducing the variability of programmers' performance through explained examples",
  "published": "1993-05-01",
  "proctitle": "CHI '93: Proceedings of the INTERACT '93 and CHI '93 Conference on Human Factors in Computing Systems",
  "pages": "67-73",
  "year": 1993,
  "badges": [],
  "abstract": "A software tool called EXPLAINER has been developed for helping programmers perform new tasks by exploring previously worked-out examples. EXPLAINER is based on cognitive principles of learning from examples and problem solving by analogy. The interface is based on the principle of making examples accessible through multiple presentation views and multiple representation perspectives. Empirical evaluation has shown that programmers using EXPLAINER exhibit less variability in their performance compared to programmers using a commercially available, searchable on-line manual. These results are related to other studies of programmers and to current methodologies in software engineering.",
  "authors": [
    {
      "name": "David F. Redmiles",
      "institution": "Department of Computer Science and Institute of Cognitive Science, Campus Box 430, University of Colorado, Boulder, Colorado",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "81100332258",
      "orcid": "missing"
    }
  ],
  "references": [
    {
      "text": "J.B. Black, J.M, Carroll, S.M. McGuig~. What Kind of Minimal Instruction Manual Is The Most Effective. Human Factors in Computing Systems and Graphics Interface, CHI+GI 87 Conference Proceedings (Toronto, Canada), ACM, New York, 1987, pp. 159-162.  ",
      "doi": "10.1145/29933.275623"
    },
    {
      "text": "M.T.H. Chi, M. Bassok, M. Lewis, P. Reimann, R. Glaser. Self-Explanations: How Students Study and Use Examples m Learning to Solve Problems. Cognitive Science 13, 2 (1989), 145-182.",
      "doi": ""
    },
    {
      "text": "D.E. Egan. Individual Differences In Human- Computer Interaction. In M. I-Ielander ted.), Handbook of Human-Computer Interaction, North- Holland, Amsterdam, 199 L Chap. 24, pp. 543-568.",
      "doi": ""
    },
    {
      "text": "G. Fischer. Cognitive View of Reuse and Redesign. IEEE Software, Special Issue on Reusability 4, 4 (July 1987), 60-72.",
      "doi": ""
    },
    {
      "text": "G. Fischer, T. Mastalglio, B.N. Reeves, J. Rieman. Minimalist Explanauons in Knowledge-Based Systems. Jay F. Nunamaker, Jr fed.), Proceedings Of the 23rd Hawaii International Conference on System Sciences, Vol III: Decision Sut~port and Knowledge Based Systems Track, 1EEE Computer Society, 1990, pp. 309-317.",
      "doi": ""
    },
    {
      "text": "G. Fischer, A. Girgensohn, K. Nakakoji, D. Redmiles. Supporting Software Designers with Integrated, Domain-Oriented Design Environments. IEEE Transactions on Software Engineering, Special Issue on Knowledge Representation and Reasoning in Software Engineering 18, 6 (1992), 511-522.  ",
      "doi": "10.1109/32.142873"
    },
    {
      "text": "M.L. Gick, K.J. Holyoak. Analogical Problem Solving. Cognitive Psychology 12 (1980), 306-355.",
      "doi": ""
    },
    {
      "text": "A. Girgensohn. End-User Modifiability in Knowledge-Based Design Environments. Ph.D. Thesis, Department of Computer Science, University of Colorado, Boulder, CO, 1992. Also available as TechReport CU-CS-595-92. ",
      "doi": "10.5555/167448"
    },
    {
      "text": "C.M. Kessler, j.R. Anderson. Learning Flow of Control: Recursive and Iterative Procedures. Human-Computer Interaction 2 (1986), 135-166.",
      "doi": "10.1207/s15327051hci0202_2"
    },
    {
      "text": "W. Kintsch, J.G. Greeno. Understanding and Solving Word Arithmetic Problems. Psychological Review 92 (1985), 109-129.",
      "doi": ""
    },
    {
      "text": "C. Lewis. Why and How to Learn Why: Analysis- Based Generahzation of Procedures. Cognitive Science 12, 2 (1988), 211-256.",
      "doi": ""
    },
    {
      "text": "B. Meyer. Reusability: The Case for Object-Oriented Design. IEEE Software 4, 2 (March 1987), 50-64.",
      "doi": "10.1109/MS.1987.230097"
    },
    {
      "text": "N. Pennington. Stimulus Structures and Mental Representations in Expert Comprehension of Computer erograms. Cognitive Psychology 19 (1987), 295-341.",
      "doi": ""
    },
    {
      "text": "P.L. Pirolli, J.R. Anderson. The Role of Learning from Examples in the Acquisition of Recursive Programming Skills. Canadian Journal of Psychology 39, 2 (1985), 240-272.",
      "doi": ""
    },
    {
      "text": "D.F. Redmiles. From Programming Tasks to Solutions-- Bridging the Gap Through the Explanation of Examples. Ph.D. Thesis, Department of Computer Science, University of Colorado, Boulder, CO, 1992. ",
      "doi": "10.5555/170277"
    },
    {
      "text": "C.H. Rich, R.C. Waters. The Programmer's Apprentice. Addison-Wesley Publishing Company, Reading, MA, 1990. ",
      "doi": "10.1145/87912"
    },
    {
      "text": "R.S. Rist. Schema Creation in Programming. Cognitive Science 13 (1989), 389-414.",
      "doi": ""
    },
    {
      "text": "J. Sodhi. Software Engineering Methods, Management, and CASE Tools. TAB Professional and Reference Books, Blue Ridge Summit, PA, 1991. ",
      "doi": "10.5555/102831"
    },
    {
      "text": "E. Soloway, J. Pinto, S. Letovsky, D. Littman, R. Lampert. Designing Documentation to Com_pensate for Delocalized Plans. Communications of the ACM 31, 11 (November 1988), 1259-1267.  ",
      "doi": "10.1145/50087.50088"
    },
    {
      "text": "E. Soloway, K. Ehrlich. Empirical Studies of Programming Knowledge. IEEE Transactions on S5~5~.6ao~Engineering SE-10,5 (September 1984),",
      "doi": "10.1109/TSE.1984.5010283"
    }
  ]
}