{
  "doi": "10.1145/3491102.3501820",
  "title": "Assisting Teaching Assistants with Automatic Code Corrections",
  "published": "2022-04-29",
  "proctitle": "CHI '22: Proceedings of the 2022 CHI Conference on Human Factors in Computing Systems",
  "pages": "1-18",
  "year": 2022,
  "badges": [],
  "abstract": "Undergraduate Teaching Assistants(TAs) in Computer Science courses are often the first and only point of contact when a student gets stuck on a programming problem. But these TAs are often relative beginners themselves, both in programming and in teaching. In this paper, we examine the impact of availability of corrected code on TAs\u2019 ability to find, fix, and address bugs in student code. We found that seeing a corrected version of the student code helps TAs debug code 29% faster, and write more accurate and complete student-facing explanations of the bugs (30% more likely to correctly address a given bug). We also observed that TAs do not generally struggle with the conceptual understanding of the underlying material. Rather, their difficulties seem more related to issues with working memory, attention, and overall high cognitive load.",
  "authors": [
    {
      "name": "Yana Malysheva",
      "institution": "Computer Science and Engineering, Washington University in St Louis, United States",
      "img": "/pb-assets/icons/DOs/default-profile-1543932446943.svg",
      "acmid": "99659528643",
      "orcid": "missing"
    },
    {
      "name": "Caitlin Kelleher",
      "institution": "Computer Science and Engineering, Washington University in St. Louis, United States",
      "img": "/do/10.1145/contrib-81100607695/rel-imgonly/ckelleher.jpg",
      "acmid": "81100607695",
      "orcid": "missing"
    }
  ],
  "references": [
    {
      "text": "Marzieh Ahmadzadeh, Dave Elliman, and Colin Higgins. 2005. An analysis of patterns of debugging among novice computer science students. In Proceedings of the 10th annual SIGCSE conference on Innovation and technology in computer science education(ITiCSE \u201905). Association for Computing Machinery, Caparica, Portugal, 84\u201388. https://doi.org/10.1145/1067445.1067472",
      "doi": "10.1145/1067445.1067472"
    },
    {
      "text": "John\u00a0R. Anderson and Robin Jeffries. 1985. Novice LISP Errors: Undetected Losses of Information from Working Memory. Human\u2013Computer Interaction 1, 2 (June 1985), 107\u2013131. https://doi.org/10.1207/s15327051hci0102_2 Publisher: Taylor & Francis _eprint: https://doi.org/10.1207/s15327051hci0102_2.",
      "doi": ""
    },
    {
      "text": "Roman Bednarik. 2012. Expertise-dependent visual attention strategies develop over time during debugging with multiple code representations. International Journal of Human-Computer Studies 70, 2 (2012), 143\u2013155. Publisher: Elsevier.",
      "doi": "10.1016/j.ijhcs.2011.09.003"
    },
    {
      "text": "Roman Bednarik and Markku Tukiainen. 2005. Effects of display blurring on the behavior of novices and experts during program debugging. In CHI \u201905 Extended Abstracts on Human Factors in Computing Systems. ACM, Portland OR USA, 1204\u20131207. https://doi.org/10.1145/1056808.1056877",
      "doi": ""
    },
    {
      "text": "Maureen Biggers, Tuba Yilmaz, and Monica Sweat. 2009. Using collaborative, modified peer led team learning to improve student success and retention in intro cs. In Proceedings of the 40th ACM technical symposium on Computer science education. 9\u201313.",
      "doi": "10.1145/1508865.1508872"
    },
    {
      "text": "Rebecca Brent, Jason Maners, Dianne Raubenheimer, and Amy Craig. 2007. Preparing undergraduates to teach computer applications to engineering freshmen. In 2007 37th Annual Frontiers In Education Conference-Global Engineering: Knowledge Without Borders, Opportunities Without Passports. IEEE, F1J\u201319.",
      "doi": ""
    },
    {
      "text": "Mark\u00a0J. Canup and Russell\u00a0L. Shackelford. 1998. Using software to solve problems in large computing courses. ACM SIGCSE Bulletin 30, 1 (1998), 135\u2013139. Publisher: ACM New York, NY, USA.",
      "doi": "10.1145/274790.273178"
    },
    {
      "text": "Henian Chen, Patricia Cohen, and Sophie Chen. 2010. How Big is a Big Odds Ratio? Interpreting the Magnitudes of Odds Ratios in Epidemiological Studies. Communications in Statistics - Simulation and Computation 39, 4 (March 2010), 860\u2013864. https://doi.org/10.1080/03610911003650383",
      "doi": ""
    },
    {
      "text": "Susan Chinn. 2000. A simple method for converting an odds ratio to effect size for use in meta-analysis. Statistics in Medicine 19, 22 (2000), 3127\u20133131. https://doi.org/10.1002/1097-0258(20001130)19:22<3127::AID-SIM784>3.0.CO;2-M _eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/1097-0258%2820001130%2919%3A22%3C3127%3A%3AAID-SIM784%3E3.0.CO%3B2-M.",
      "doi": ""
    },
    {
      "text": "Sammi Chow, Kalina Yacef, Irena Koprinska, and James Curran. 2017. Automated data-driven hints for computer programming students. In Adjunct Publication of the 25th Conference on User Modeling, Adaptation and Personalization. 5\u201310.",
      "doi": "10.1145/3099023.3099065"
    },
    {
      "text": "Adrienne Decker, Phil Ventura, and Christopher Egert. 2006. Through the looking glass: reflections on using undergraduate teaching assistants in CS1. In Proceedings of the 37th SIGCSE technical symposium on Computer science education. 46\u201350.",
      "doi": "10.1145/1121341.1121358"
    },
    {
      "text": "M. Ducasse and A.-M. Emde. 1988. A review of automated debugging systems: knowledge, strategies and techniques. In Proceedings. [1989] 11th International Conference on Software Engineering. 162\u2013171. https://doi.org/10.1109/ICSE.1988.93698",
      "doi": ""
    },
    {
      "text": "Ronald Erdei, John\u00a0A. Springer, and David\u00a0M. Whittinghill. 2017. An impact comparison of two instructional scaffolding strategies employed in our programming laboratories: Employment of a supplemental teaching assistant versus employment of the pair programming methodology. In 2017 IEEE Frontiers in Education Conference (FIE). 1\u20136. https://doi.org/10.1109/FIE.2017.8190650",
      "doi": ""
    },
    {
      "text": "Joseph Fong, Dawn Leung, and Donny Lai. 2009. A Peer-to-Peer eLearning Supporting System for Computer Programming Debugging System. In Hybrid Learning and Education, David Hutchison, Takeo Kanade, Josef Kittler, Jon\u00a0M. Kleinberg, Friedemann Mattern, John\u00a0C. Mitchell, Moni Naor, Oscar Nierstrasz, C.\u00a0Pandu\u00a0Rangan, Bernhard Steffen, Madhu Sudan, Demetri Terzopoulos, Doug Tygar, Moshe\u00a0Y. Vardi, Gerhard Weikum, Fu\u00a0Lee Wang, Joseph Fong, Liming Zhang, and Victor S.\u00a0K. Lee (Eds.). Vol.\u00a05685. Springer Berlin Heidelberg, Berlin, Heidelberg, 230\u2013239. https://doi.org/10.1007/978-3-642-03697-2_22 Series Title: Lecture Notes in Computer Science.",
      "doi": ""
    },
    {
      "text": "Meg Fryling, MaryAnne Egan, Robin\u00a0Y. Flatland, Scott Vandenberg, and Sharon Small. 2018. Catch\u2019em Early: Internship and Assistantship CS Mentoring Programs for Underclassmen. In Proceedings of the 49th ACM Technical Symposium on Computer Science Education. 658\u2013663.",
      "doi": "10.1145/3159450.3159556"
    },
    {
      "text": "Elena\u00a0L. Glassman, Christopher\u00a0J. Terman, and Robert\u00a0C. Miller. 2015. Learner-Sourcing in an Engineering Class at Scale. In Proceedings of the Second (2015) ACM Conference on Learning @ Scale(L@S \u201915). Association for Computing Machinery, New York, NY, USA, 363\u2013366. https://doi.org/10.1145/2724660.2728694",
      "doi": "10.1145/2724660.2728694"
    },
    {
      "text": "John\u00a0D. Gould and Paul Drongowski. 1974. An exploratory study of computer program debugging. Human Factors 16, 3 (1974), 258\u2013277. Publisher: SAGE Publications Sage CA: Los Angeles, CA.",
      "doi": ""
    },
    {
      "text": "Sebastian Gross, Bassam Mokbel, Benjamin Paa\u00dfen, Barbara Hammer, and Niels Pinkwart. 2014. Example-based feedback provision using structured solution spaces. International Journal of Learning Technology 10 9, 3 (2014), 248\u2013280. Publisher: Inderscience Publishers Ltd.",
      "doi": "10.1504/IJLT.2014.065752"
    },
    {
      "text": "L. Gugerty and G. Olson. 1986. Debugging by skilled and novice programmers. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems(CHI \u201986). Association for Computing Machinery, Boston, Massachusetts, USA, 171\u2013174. https://doi.org/10.1145/22627.22367",
      "doi": ""
    },
    {
      "text": "Leo Gugerty and Gary\u00a0M. Olson. 1986. Comprehension differences in debugging by skilled and novice programmers. In Papers presented at the first workshop on empirical studies of programmers on Empirical studies of programmers. Ablex Publishing Corp., Washington, D.C., USA, 13\u201327.",
      "doi": ""
    },
    {
      "text": "Andrew Head, Elena Glassman, Gustavo Soares, Ryo Suzuki, Lucas Figueredo, Loris D\u2019Antoni, and Bj\u00f6rn Hartmann. 2017. Writing Reusable Code Feedback at Scale with Mixed-Initiative Program Synthesis. In Proceedings of the Fourth (2017) ACM Conference on Learning @ Scale - L@S \u201917. ACM Press, Cambridge, Massachusetts, USA, 89\u201398. https://doi.org/10.1145/3051457.3051467",
      "doi": "10.1145/3051457.3051467"
    },
    {
      "text": "Prateek Hejmady and N.\u00a0Hari Narayanan. 2012. Visual attention patterns during program debugging with an IDE. In Proceedings of the Symposium on Eye Tracking Research and Applications - ETRA \u201912. ACM Press, Santa Barbara, California, 197. https://doi.org/10.1145/2168556.2168592",
      "doi": "10.1145/2168556.2168592"
    },
    {
      "text": "Wei Jin, Tiffany Barnes, John Stamper, Michael\u00a0John Eagle, Matthew\u00a0W. Johnson, and Lorrie Lehmann. 2012. Program representation for automatic hint generation for a data-driven novice programming tutor. In International conference on intelligent tutoring systems. Springer, 304\u2013309.",
      "doi": "10.1007/978-3-642-30950-2_40"
    },
    {
      "text": "Irvin\u00a0R. Katz and John\u00a0R. Anderson. 1987. Debugging: An analysis of bug-location strategies. Human-Computer Interaction 3, 4 (1987), 351\u2013399. Publisher: Taylor & Francis.",
      "doi": "10.1207/s15327051hci0304_2"
    },
    {
      "text": "Brittany\u00a0Ann Kos. 2017. The collaborative learning framework: Scaffolding for untrained peer-to-peer collaboration. (2017).",
      "doi": ""
    },
    {
      "text": "Timotej Lazar, Aleksander Sadikov, and Ivan Bratko. 2017. Rewrite Rules for Debugging Student Programs in Programming Tutors. IEEE Transactions on Learning Technologies 11, 4 (2017), 429\u2013440.",
      "doi": ""
    },
    {
      "text": "Yu-Tzu Lin, Cheng-Chih Wu, Ting-Yun Hou, Yu-Chih Lin, Fang-Ying Yang, and Chia-Hu Chang. 2016. Tracking Students\u2019 Cognitive Processes During Program Debugging\u2014An Eye-Movement Approach. IEEE Transactions on Education 59, 3 (Aug. 2016), 175\u2013186. https://doi.org/10.1109/TE.2015.2487341 Conference Name: IEEE Transactions on Education.",
      "doi": ""
    },
    {
      "text": "Yi Liu, Gita PhelpsA, and Fengxia Yan. 2019. Developing a guided peer-assisted learning community for CS students. Journal of Computing Sciences in Colleges 34, 7 (2019), 72\u201380. Publisher: Consortium for Computing Sciences in Colleges.",
      "doi": "10.5555/3344081.3344089"
    },
    {
      "text": "Renee McCauley, Sue Fitzgerald, Gary Lewandowski, Laurie Murphy, Beth Simon, Lynda Thomas, and Carol Zander. 2008. Debugging: a review of the literature from an educational perspective. Computer Science Education 18, 2 (2008), 67\u201392. Publisher: Taylor & Francis.",
      "doi": ""
    },
    {
      "text": "Ruth McKeever and Kevin McDaid. 2010. How do Range Names Hinder Novice Spreadsheet Debugging Performance?arXiv:1009.2765 [cs] (Sept. 2010). http://arxiv.org/abs/1009.2765 arXiv:1009.2765.",
      "doi": ""
    },
    {
      "text": "Mia Minnes, Christine Alvarado, and Leo Porter. 2018. Lightweight Techniques to Support Students in Large Classes. In Proceedings of the 49th ACM Technical Symposium on Computer Science Education. ACM, Baltimore Maryland USA, 122\u2013127. https://doi.org/10.1145/3159450.3159601",
      "doi": "10.1145/3159450.3159601"
    },
    {
      "text": "Diba Mirza, Phillip\u00a0T. Conrad, Christian Lloyd, Ziad Matni, and Arthur Gatin. 2019. Undergraduate Teaching Assistants in Computer Science: A Systematic Literature Review. In Proceedings of the 2019 ACM Conference on International Computing Education Research(ICER \u201919). Association for Computing Machinery, New York, NY, USA, 31\u201340. https://doi.org/10.1145/3291279.3339422",
      "doi": "10.1145/3291279.3339422"
    },
    {
      "text": "Murthi Nanja and Curtis\u00a0R. Cook. 1987. An analysis of the on-line debugging process. In Empirical studies of programmers: Second workshop. 172\u2013184.",
      "doi": ""
    },
    {
      "text": "Benjamin Paa\u00dfen, Barbara Hammer, Thomas\u00a0William Price, Tiffany Barnes, Sebastian Gross, and Niels Pinkwart. 2018. The Continuous Hint Factory - Providing Hints in Vast and Sparsely Populated Edit Distance Spaces. arXiv:1708.06564 [cs] (June 2018). http://arxiv.org/abs/1708.06564 arXiv:1708.06564.",
      "doi": ""
    },
    {
      "text": "Inna Pivkina. 2016. Peer learning assistants in undergraduate computer science courses. In 2016 IEEE Frontiers in Education Conference (FIE). IEEE, 1\u20134.",
      "doi": "10.1109/FIE.2016.7757658"
    },
    {
      "text": "Thomas Price. 2021. thomaswp/CSEDM2019-Data-Challenge. https://github.com/thomaswp/CSEDM2019-Data-Challenge original-date: 2018-12-30T21:05:59Z.",
      "doi": ""
    },
    {
      "text": "Thomas Price, Rui Zhi, and Tiffany Barnes. 2017. Evaluation of a Data-Driven Feedback Algorithm for Open-Ended Programming.International Educational Data Mining Society (2017).",
      "doi": ""
    },
    {
      "text": "Thomas\u00a0W. Price, Yihuan Dong, Rui Zhi, Benjamin Paa\u00dfen, Nicholas Lytle, Veronica Catet\u00e9, and Tiffany Barnes. 2019. A Comparison of the Quality of Data-driven Programming Hint Generation Algorithms. International Journal of Artificial Intelligence in Education 29, 3(2019), 368\u2013395. Publisher: Springer.",
      "doi": ""
    },
    {
      "text": "Yewen Pu, Karthik Narasimhan, Armando Solar-Lezama, and Regina Barzilay. 2016. sk_p: a neural program corrector for MOOCs. In Companion Proceedings of the 2016 ACM SIGPLAN International Conference on Systems, Programming, Languages and Applications: Software for Humanity. 39\u201340.",
      "doi": "10.1145/2984043.2989222"
    },
    {
      "text": "Kelly Rivers and Kenneth\u00a0R. Koedinger. 2017. Data-Driven Hint Generation in Vast Solution Spaces: a Self-Improving Python Programming Tutor. International Journal of Artificial Intelligence in Education 27, 1 (March 2017), 37\u201364. https://doi.org/10.1007/s40593-015-0070-z",
      "doi": ""
    },
    {
      "text": "T.\u00a0J. Robertson, Shrinu Prabhakararao, Margaret Burnett, Curtis Cook, Joseph\u00a0R. Ruthruff, Laura Beckwith, and Amit Phalgune. 2004. Impact of interruption style on end-user debugging. In Proceedings of the SIGCHI conference on Human factors in computing systems. 287\u2013294.",
      "doi": "10.1145/985692.985729"
    },
    {
      "text": "Pablo Romero, Richard Cox, Benedict du Boulay, and Rudi Lutz. 2002. Visual Attention and Representation Switching During Java Program Debugging: A Study Using the Restricted Focus Viewer. In Diagrammatic Representation and Inference(Lecture Notes in Computer Science), Mary Hegarty, Bernd Meyer, and N.\u00a0Hari Narayanan (Eds.). Springer, Berlin, Heidelberg, 221\u2013235. https://doi.org/10.1007/3-540-46037-3_23",
      "doi": ""
    },
    {
      "text": "Abdallah Tubaishat. 2001. A knowledge base for program debugging. In Proceedings ACS/IEEE International Conference on Computer Systems and Applications. IEEE, 321\u2013327.",
      "doi": "10.5555/872017.872255"
    },
    {
      "text": "Iris Vessey. 1985. Expertise in debugging computer programs: A process analysis. International Journal of Man-Machine Studies 23, 5 (1985), 459\u2013494. Publisher: Elsevier.",
      "doi": ""
    },
    {
      "text": "Arto Vihavainen, Thomas Vikberg, Matti Luukkainen, and Jaakko Kurhila. 2013. Massive increase in eager TAs: Experiences from extreme apprenticeship-based CS1. In Proceedings of the 18th ACM conference on Innovation and technology in computer science education. 123\u2013128.",
      "doi": "10.1145/2462476.2462508"
    },
    {
      "text": "Erin Walker, Nikol Rummel, and Kenneth\u00a0R. Koedinger. 2009. Integrating collaboration and intelligent tutoring data in the evaluation of a reciprocal peer tutoring environment. Research and Practice in Technology Enhanced Learning 4, 03 (2009), 221\u2013251. Publisher: World Scientific.",
      "doi": ""
    },
    {
      "text": "Ke Wang, Benjamin Lin, Bjorn Rettig, Paul Pardi, and Rishabh Singh. 2017. Data-driven feedback generator for online programing courses. In Proceedings of the Fourth (2017) ACM Conference on Learning@ Scale. 257\u2013260.",
      "doi": "10.1145/3051457.3053999"
    },
    {
      "text": "E.\u00a0M. Wilcox, J.\u00a0W. Atwood, M.\u00a0M. Burnett, J.\u00a0J. Cadiz, and C.\u00a0R. Cook. 1997. Does continuous visual feedback aid debugging in direct-manipulation programming systems?. In Proceedings of the ACM SIGCHI Conference on Human factors in computing systems. ACM, Atlanta Georgia USA, 258\u2013265. https://doi.org/10.1145/258549.258721",
      "doi": "10.1145/258549.258721"
    },
    {
      "text": "Kurtis Zimmerman and Chandan\u00a0R. Rupakheti. 2015. An automated framework for recommending program elements to novices (n). In 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 283\u2013288.",
      "doi": "10.1109/ASE.2015.54"
    }
  ]
}